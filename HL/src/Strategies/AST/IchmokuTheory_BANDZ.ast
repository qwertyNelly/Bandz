Script(
  body=[
    Expr(
      value=Call(
        func=Name(id='strategy', ctx=Load()),
        args=[
          Arg(
            value=Constant(value='Bandz'),
            name='title'),
          Arg(
            value=Constant(value=True),
            name='overlay'),
          Arg(
            value=Constant(value=500),
            name='max_lines_count'),
          Arg(
            value=Constant(value=500),
            name='max_labels_count'),
          Arg(
            value=Constant(value=100),
            name='max_polylines_count')])),
    Assign(
      target=Name(id='BULLISH_LEG', ctx=Store()),
      value=Constant(value=1),
      annotations=[]),
    Assign(
      target=Name(id='BEARISH_LEG', ctx=Store()),
      value=Constant(value=0),
      annotations=[]),
    Assign(
      target=Name(id='KIHON', ctx=Store()),
      value=Constant(value='KIHON SUCHI'),
      annotations=[]),
    Assign(
      target=Name(id='TAITO', ctx=Store()),
      value=Constant(value='TAITO SUCHI'),
      annotations=[]),
    Assign(
      target=Name(id='HIGHS', ctx=Store()),
      value=Constant(value='HIGHS'),
      annotations=[]),
    Assign(
      target=Name(id='LOWS', ctx=Store()),
      value=Constant(value='LOWS'),
      annotations=[]),
    Assign(
      target=Name(id='SWINGS', ctx=Store()),
      value=Constant(value='SWINGS'),
      annotations=[]),
    Assign(
      target=Name(id='TENKAN', ctx=Store()),
      value=Constant(value='TENKAN CROSS'),
      annotations=[]),
    Assign(
      target=Name(id='KIJUN', ctx=Store()),
      value=Constant(value='KIJUN CROSS'),
      annotations=[]),
    Assign(
      target=Name(id='KUMO', ctx=Store()),
      value=Constant(value='KUMO CHANGE'),
      annotations=[]),
    Assign(
      target=Name(id='WAVE', ctx=Store()),
      value=Constant(value='WAVES'),
      annotations=[]),
    Assign(
      target=Name(id='WAVE_I', ctx=Store()),
      value=Constant(value='WAVE I'),
      annotations=[]),
    Assign(
      target=Name(id='WAVE_V', ctx=Store()),
      value=Constant(value='WAVE V'),
      annotations=[]),
    Assign(
      target=Name(id='WAVE_N', ctx=Store()),
      value=Constant(value='WAVE N'),
      annotations=[]),
    Assign(
      target=Name(id='WAVE_P', ctx=Store()),
      value=Constant(value='WAVE P'),
      annotations=[]),
    Assign(
      target=Name(id='WAVE_Y', ctx=Store()),
      value=Constant(value='WAVE Y'),
      annotations=[]),
    Assign(
      target=Name(id='WAVE_W', ctx=Store()),
      value=Constant(value='WAVE W'),
      annotations=[]),
    Assign(
      target=Name(id='BULLISH', ctx=Store()),
      value=Constant(value='BULLISH'),
      annotations=[]),
    Assign(
      target=Name(id='BEARISH', ctx=Store()),
      value=Constant(value='BEARISH'),
      annotations=[]),
    Assign(
      target=Name(id='EN_SPACE', ctx=Store()),
      value=Constant(value='\u2002'),
      annotations=[]),
    Assign(
      target=Name(id='EM_SPACE', ctx=Store()),
      value=Constant(value='\u2003'),
      annotations=[]),
    Assign(
      target=Name(id='FOUR_PER_EM_SPACE', ctx=Store()),
      value=Constant(value='\u2005'),
      annotations=[]),
    Assign(
      target=Name(id='SIX_PER_EM_SPACE', ctx=Store()),
      value=Constant(value='\u2006'),
      annotations=[]),
    Assign(
      target=Name(id='HAIR_SPACE', ctx=Store()),
      value=Constant(value='\u200a'),
      annotations=[]),
    Assign(
      target=Name(id='GREEN', ctx=Store()),
      value=Constant(value='#089981', kind='#'),
      annotations=[]),
    Assign(
      target=Name(id='RED', ctx=Store()),
      value=Constant(value='#F23645', kind='#'),
      annotations=[]),
    Assign(
      target=Name(id='ICHIMOKU_GROUP', ctx=Store()),
      value=Constant(value='ICHIMOKU KINKŌ HYŌ'),
      annotations=[]),
    Assign(
      target=Name(id='TIME_GROUP', ctx=Store()),
      value=Constant(value='TIME THEORY'),
      annotations=[]),
    Assign(
      target=Name(id='WAVE_GROUP', ctx=Store()),
      value=Constant(value='WAVE THEORY'),
      annotations=[]),
    Assign(
      target=Name(id='PRICE_GROUP', ctx=Store()),
      value=Constant(value='PRICE THEORY'),
      annotations=[]),
    Assign(
      target=Name(id='showPivotMarksTooltip', ctx=Store()),
      value=Constant(value='Enable/Disable points on swing highs and swing lows.'),
      annotations=[]),
    Assign(
      target=Name(id='pivotLengthTooltip', ctx=Store()),
      value=Constant(value='Number of candles to confirm a swing high or swing low. A higher number detects larger swings.'),
      annotations=[]),
    Assign(
      target=Name(id='showIchimokuLinesTooltip', ctx=Store()),
      value=Constant(value='Enable/Disable the 5 Ichimoku lines: kijun sen, tenkan sen, senkou span A & B and chikou span.'),
      annotations=[]),
    Assign(
      target=Name(id='showIchimokuKumoTooltip', ctx=Store()),
      value=Constant(value='Enable/Disable the Kumo (cloud). The Kumo is formed by 2 lines: Senkou Span A and Senkou Span B.'),
      annotations=[]),
    Assign(
      target=Name(id='tenkanSenLengthTooltip', ctx=Store()),
      value=Constant(value='Number of candles for Tenkan Sen calculation.'),
      annotations=[]),
    Assign(
      target=Name(id='kinjuSenLengthTooltip', ctx=Store()),
      value=Constant(value='Number of candles for the Kijun Sen calculation.'),
      annotations=[]),
    Assign(
      target=Name(id='senkouSpanBLengthTooltip', ctx=Store()),
      value=Constant(value='Number of candles for Senkou Span B calculation.'),
      annotations=[]),
    Assign(
      target=Name(id='ichimokunOffsetTooltip', ctx=Store()),
      value=Constant(value='Number of candles for Chikou and Senkou Span calculation. Chikou Span is plotted in the past, Senkou Span A & B in the future.'),
      annotations=[]),
    Assign(
      target=Name(id='showTimeForecastTooltip', ctx=Store()),
      value=Constant(value='Enable/Disable time cycle forecast vertical lines. Disable for better performance.'),
      annotations=[]),
    Assign(
      target=Name(id='timePatternTooltip', ctx=Store()),
      value=Constant(value='Choose between two patterns: Kihon Suchi (basic numbers) or Taito Suchi (equal numbers).'),
      annotations=[]),
    Assign(
      target=Name(id='timeForecastAnchorTooltip', ctx=Store()),
      value=Constant(value='Number of time cycles in the past to anchor the time cycle forecast. The larger the number, the deeper in the past the anchor will be.'),
      annotations=[]),
    Assign(
      target=Name(id='timeCycleModeTooltip', ctx=Store()),
      value=Constant(value='Choose from 7 time cycle detection modes: Tenkan Sen cross, Kijun Sen cross, Kumo change between bullish & bearish, swing highs only, swing lows only, both swing highs & lows and wave detection.'),
      annotations=[]),
    Assign(
      target=Name(id='waveCyleTooltip', ctx=Store()),
      value=Constant(value='Choose which type of wave to detect from 6 different wave types when time cycle mode is set to WAVES.'),
      annotations=[]),
    Assign(
      target=Name(id='showTimeCyclesTooltip', ctx=Store()),
      value=Constant(value='Enable/Disable time cycle horizontal lines. Disable for better performance.'),
      annotations=[]),
    Assign(
      target=Name(id='maximumTimeCyclesTooltip', ctx=Store()),
      value=Constant(value='Maximum number of time cycles to display.'),
      annotations=[]),
    Assign(
      target=Name(id='basicWavesTooltip', ctx=Store()),
      value=Constant(value='Enable/Disable display of basic waves, all at once or one at a time. Disable for better performance.'),
      annotations=[]),
    Assign(
      target=Name(id='complexWavesTooltip', ctx=Store()),
      value=Constant(value='Enable/Disable complex wave display, all at once or one by one. Disable for better performance.'),
      annotations=[]),
    Assign(
      target=Name(id='overlappingWavesTooltip', ctx=Store()),
      value=Constant(value='Enable/Disable display of waves ending on the same swing point.'),
      annotations=[]),
    Assign(
      target=Name(id='maximumWavesTooltip', ctx=Store()),
      value=Constant(value='Maximum number of waves to display.'),
      annotations=[]),
    Assign(
      target=Name(id='basicTargetsTooltip', ctx=Store()),
      value=Constant(value='Enable/Disable horizontal price target lines. Disable for better performance.'),
      annotations=[]),
    Assign(
      target=Name(id='extendedTargetsTooltip', ctx=Store()),
      value=Constant(value='Enable/Disable extended price target horizontal lines. Disable for better performance.'),
      annotations=[]),
    Assign(
      target=Name(id='showPivotMarksInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=Constant(value='Show Swing Highs & Lows')),
          Arg(
            value=Constant(value=''),
            name='group'),
          Arg(
            value=Name(id='showPivotMarksTooltip', ctx=Load()),
            name='tooltip')]),
      annotations=[]),
    Assign(
      target=Name(id='pivotLengthInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='int',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=10)),
          Arg(
            value=Constant(value='Swing Length')),
          Arg(
            value=Constant(value=''),
            name='group'),
          Arg(
            value=Name(id='pivotLengthTooltip', ctx=Load()),
            name='tooltip'),
          Arg(
            value=Constant(value=1),
            name='minval')]),
      annotations=[]),
    Assign(
      target=Name(id='showIchimokuLinesInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=Constant(value='Show Lines')),
          Arg(
            value=Name(id='ICHIMOKU_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='showIchimokuLinesTooltip', ctx=Load()),
            name='tooltip')]),
      annotations=[]),
    Assign(
      target=Name(id='showIchimokuKumoInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=Constant(value='Show Kumo')),
          Arg(
            value=Name(id='ICHIMOKU_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='showIchimokuKumoTooltip', ctx=Load()),
            name='tooltip')]),
      annotations=[]),
    Assign(
      target=Name(id='tenkanSenLengthInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='int',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=9)),
          Arg(
            value=Constant(value='Tenkan Sen Length')),
          Arg(
            value=Name(id='ICHIMOKU_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='tenkanSenLengthTooltip', ctx=Load()),
            name='tooltip')]),
      annotations=[]),
    Assign(
      target=Name(id='kinjuSenLengthInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='int',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=26)),
          Arg(
            value=Constant(value='Kinjun Sen Length')),
          Arg(
            value=Name(id='ICHIMOKU_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='kinjuSenLengthTooltip', ctx=Load()),
            name='tooltip')]),
      annotations=[]),
    Assign(
      target=Name(id='senkouSpanBLengthInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='int',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=52)),
          Arg(
            value=Constant(value='Senkou Span B Length')),
          Arg(
            value=Name(id='ICHIMOKU_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='senkouSpanBLengthTooltip', ctx=Load()),
            name='tooltip')]),
      annotations=[]),
    Assign(
      target=Name(id='ichimokuOffsetInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='int',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=26)),
          Arg(
            value=Constant(value='Chikou & Senkou Offset')),
          Arg(
            value=Name(id='ICHIMOKU_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='ichimokunOffsetTooltip', ctx=Load()),
            name='tooltip')]),
      annotations=[]),
    Assign(
      target=Name(id='showTimeForecastInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=Constant(value='Show Time Cycle Forecast')),
          Arg(
            value=Name(id='TIME_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='showTimeForecastTooltip', ctx=Load()),
            name='tooltip')]),
      annotations=[]),
    Assign(
      target=Name(id='timePatternInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='string',
          ctx=Load()),
        args=[
          Arg(
            value=Name(id='KIHON', ctx=Load())),
          Arg(
            value=Constant(value='Forecast Pattern')),
          Arg(
            value=Name(id='TIME_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='timePatternTooltip', ctx=Load()),
            name='tooltip'),
          Arg(
            value=Tuple(
              elts=[
                Name(id='KIHON', ctx=Load()),
                Name(id='TAITO', ctx=Load())],
              ctx=Load()),
            name='options')]),
      annotations=[]),
    Assign(
      target=Name(id='timeForecastAnchorInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='int',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=1)),
          Arg(
            value=Constant(value='Anchor forecast on last X time cycle')),
          Arg(
            value=Name(id='TIME_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='timeForecastAnchorTooltip', ctx=Load()),
            name='tooltip'),
          Arg(
            value=Constant(value=1),
            name='minval')]),
      annotations=[]),
    Assign(
      target=Name(id='timeCycleModeInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='string',
          ctx=Load()),
        args=[
          Arg(
            value=Name(id='SWINGS', ctx=Load())),
          Arg(
            value=Constant(value='Time Cycle Mode')),
          Arg(
            value=Name(id='TIME_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='timeCycleModeTooltip', ctx=Load()),
            name='tooltip'),
          Arg(
            value=Tuple(
              elts=[
                Name(id='TENKAN', ctx=Load()),
                Name(id='KIJUN', ctx=Load()),
                Name(id='KUMO', ctx=Load()),
                Name(id='HIGHS', ctx=Load()),
                Name(id='LOWS', ctx=Load()),
                Name(id='SWINGS', ctx=Load()),
                Name(id='WAVE', ctx=Load())],
              ctx=Load()),
            name='options')]),
      annotations=[]),
    Assign(
      target=Name(id='waveCyleInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='string',
          ctx=Load()),
        args=[
          Arg(
            value=Name(id='WAVE_I', ctx=Load())),
          Arg(
            value=Constant(value='Wave Cycle')),
          Arg(
            value=Name(id='TIME_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='waveCyleTooltip', ctx=Load()),
            name='tooltip'),
          Arg(
            value=Tuple(
              elts=[
                Name(id='WAVE_I', ctx=Load()),
                Name(id='WAVE_V', ctx=Load()),
                Name(id='WAVE_N', ctx=Load()),
                Name(id='WAVE_P', ctx=Load()),
                Name(id='WAVE_Y', ctx=Load()),
                Name(id='WAVE_W', ctx=Load())],
              ctx=Load()),
            name='options')]),
      annotations=[]),
    Assign(
      target=Name(id='showTimeCyclesInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=Constant(value='Show Time Cycles')),
          Arg(
            value=Name(id='TIME_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='showTimeCyclesTooltip', ctx=Load()),
            name='tooltip')]),
      annotations=[]),
    Assign(
      target=Name(id='maximumTimeCyclesInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='int',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=10)),
          Arg(
            value=Constant(value='Show last X time cycles')),
          Arg(
            value=Name(id='TIME_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='maximumTimeCyclesTooltip', ctx=Load()),
            name='tooltip'),
          Arg(
            value=Constant(value=1),
            name='minval')]),
      annotations=[]),
    Assign(
      target=Name(id='showBasicWavesInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=BinOp(
              left=BinOp(
                left=Constant(value='Basic Waves:'),
                op=Add(),
                right=Name(id='EN_SPACE', ctx=Load())),
              op=Add(),
              right=Name(id='EM_SPACE', ctx=Load()))),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='basic waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showWaveIInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=False)),
          Arg(
            value=Constant(value='I')),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='basic waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='waveIColorInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='color',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value='#e91e63', kind='#')),
          Arg(
            value=Name(id='FOUR_PER_EM_SPACE', ctx=Load())),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='basic waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showWaveVInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=False)),
          Arg(
            value=Constant(value='V')),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='basic waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='waveVColorInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='color',
          ctx=Load()),
        args=[
          Arg(
            value=Attribute(
              value=Name(id='color', ctx=Load()),
              attr='yellow',
              ctx=Load())),
          Arg(
            value=Constant(value='')),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='basic waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showWaveNInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=Constant(value='N')),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='basic waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='waveNColorInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='color',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value='#5b9cf6', kind='#')),
          Arg(
            value=Name(id='FOUR_PER_EM_SPACE', ctx=Load())),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='basicWavesTooltip', ctx=Load()),
            name='tooltip'),
          Arg(
            value=Constant(value='basic waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showComplexWavesInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=False)),
          Arg(
            value=Constant(value='Complex Waves:')),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='complex waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showWavePInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=Constant(value='P')),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='complex waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='wavePColorInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='color',
          ctx=Load()),
        args=[
          Arg(
            value=Attribute(
              value=Name(id='color', ctx=Load()),
              attr='aqua',
              ctx=Load())),
          Arg(
            value=Constant(value='')),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='complex waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showWaveYInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=Constant(value='Y')),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='complex waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='waveYColorInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='color',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value='#ff5d00', kind='#')),
          Arg(
            value=Name(id='SIX_PER_EM_SPACE', ctx=Load())),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='complex waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showWaveWInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=Constant(value='W')),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='complex waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='waveWColorInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='color',
          ctx=Load()),
        args=[
          Arg(
            value=Attribute(
              value=Name(id='color', ctx=Load()),
              attr='lime',
              ctx=Load())),
          Arg(
            value=Name(id='HAIR_SPACE', ctx=Load())),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='complexWavesTooltip', ctx=Load()),
            name='tooltip'),
          Arg(
            value=Constant(value='complex waves'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='overlappingWavesInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=False)),
          Arg(
            value=Constant(value='Overlapping Waves')),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='overlappingWavesTooltip', ctx=Load()),
            name='tooltip')]),
      annotations=[]),
    Assign(
      target=Name(id='maximumWavesInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='int',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=10)),
          Arg(
            value=Constant(value='Show last X waves')),
          Arg(
            value=Name(id='WAVE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='maximumWavesTooltip', ctx=Load()),
            name='tooltip'),
          Arg(
            value=Constant(value=1),
            name='minval')]),
      annotations=[]),
    Assign(
      target=Name(id='showBasicTargetsInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=BinOp(
              left=BinOp(
                left=Constant(value='Basic Targets:'),
                op=Add(),
                right=Name(id='EM_SPACE', ctx=Load())),
              op=Add(),
              right=Name(id='EM_SPACE', ctx=Load()))),
          Arg(
            value=Name(id='PRICE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='basic targets'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showTargetVInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=BinOp(
              left=BinOp(
                left=Constant(value='V'),
                op=Add(),
                right=Name(id='EM_SPACE', ctx=Load())),
              op=Add(),
              right=Name(id='EN_SPACE', ctx=Load()))),
          Arg(
            value=Name(id='PRICE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='basic targets'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showTargetEInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=BinOp(
              left=Constant(value='E'),
              op=Add(),
              right=Name(id='EM_SPACE', ctx=Load()))),
          Arg(
            value=Name(id='PRICE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='basic targets'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showTargetNInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=BinOp(
              left=Constant(value='N'),
              op=Add(),
              right=Name(id='EM_SPACE', ctx=Load()))),
          Arg(
            value=Name(id='PRICE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='basic targets'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showTargetNTInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=Constant(value='NT')),
          Arg(
            value=Name(id='PRICE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='basicTargetsTooltip', ctx=Load()),
            name='tooltip'),
          Arg(
            value=Constant(value='basic targets'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showExtendedTargetsInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=False)),
          Arg(
            value=Constant(value='Extended Targets:')),
          Arg(
            value=Name(id='PRICE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='extended targets'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showTarget2EInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=BinOp(
              left=Constant(value='2E'),
              op=Add(),
              right=Name(id='EM_SPACE', ctx=Load()))),
          Arg(
            value=Name(id='PRICE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Constant(value=''),
            name='tooltip'),
          Arg(
            value=Constant(value='extended targets'),
            name='inline')]),
      annotations=[]),
    Assign(
      target=Name(id='showTarget3EInput', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='input', ctx=Load()),
          attr='bool',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=True)),
          Arg(
            value=Constant(value='3E')),
          Arg(
            value=Name(id='PRICE_GROUP', ctx=Load()),
            name='group'),
          Arg(
            value=Name(id='extendedTargetsTooltip', ctx=Load()),
            name='tooltip'),
          Arg(
            value=Constant(value='extended targets'),
            name='inline')]),
      annotations=[]),
    TypeDef(
      name='swingPoint',
      body=[
        Assign(
          target=Name(id='barTime', ctx=Store()),
          type=Name(id='int', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='barIndex', ctx=Store()),
          type=Name(id='int', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='priceLevel', ctx=Store()),
          type=Name(id='float', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='leg', ctx=Store()),
          type=Name(id='int', ctx=Load()),
          annotations=[])],
      export=0,
      annotations=[
        '// @type                    Storage UDT for pivot points',
        '// @field barTime           Time index of the privot point     ',
        '// @field barIndex          Bar index of the privot point',
        '// @field priceLevel        Price level of the pivot point',
        '// @field leg               Bullish or bearish bias (1 or 0)']),
    TypeDef(
      name='timeCycle',
      body=[
        Assign(
          target=Name(id='firstBarTime', ctx=Store()),
          type=Name(id='int', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='firstBarIndex', ctx=Store()),
          type=Name(id='int', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='lastBarTime', ctx=Store()),
          type=Name(id='int', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='lastBarIndex', ctx=Store()),
          type=Name(id='int', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='cycleLine', ctx=Store()),
          type=Name(id='line', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='cycleLabel', ctx=Store()),
          type=Name(id='label', ctx=Load()),
          annotations=[])],
      export=0,
      annotations=[
        '// @type                    Storage UDT for time cycles',
        '// @field firstBarTime      Time index of the time cycle first bar ',
        '// @field firstBarIndex     Bar index  of the time cycle first bar',
        '// @field lastBarTime       Time index of the time cycle last bar',
        '// @field lastBarIndex      Bar index  of the time cycle last bar',
        '// @field cycleLine         Plotted line',
        '// @field cycleLabel        Plotted label']),
    TypeDef(
      name='wave',
      body=[
        Assign(
          target=Name(id='points', ctx=Store()),
          type=Specialize(
            value=Name(id='array', ctx=Load()),
            args=Attribute(
              value=Name(id='chart', ctx=Load()),
              attr='point',
              ctx=Load())),
          annotations=[]),
        Assign(
          target=Name(id='tag', ctx=Store()),
          type=Name(id='string', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='bias', ctx=Store()),
          type=Name(id='string', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='waveLabel', ctx=Store()),
          type=Name(id='label', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='line1', ctx=Store()),
          type=Name(id='line', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='line2', ctx=Store()),
          type=Name(id='line', ctx=Load()),
          annotations=[])],
      export=0,
      annotations=[
        '// @type                    Storage UDT for waves',
        '// @field points            chart.point array representing wave points',
        '// @field tag               tag representing the type of wave',
        '// @field bias              bullish of bearish bias as string',
        '// @field waveLabel         plotted label',
        '// @field line1             plotted line for P & Y waves ',
        '// @field line2             plotted line for P & Y waves ']),
    TypeDef(
      name='priceTarget',
      body=[
        Assign(
          target=Name(id='targetLine', ctx=Store()),
          type=Name(id='line', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='targetLabel', ctx=Store()),
          type=Name(id='label', ctx=Load()),
          annotations=[])],
      export=0,
      annotations=[
        '// @type                    Storage UDT for price targets',
        '// @field targetLine        Plotted line',
        '// @field targetLabel       Plotted label']),
    Assign(
      target=Name(id='swingPoints', ctx=Store()),
      value=Call(
        func=Specialize(
          value=Attribute(
            value=Name(id='array', ctx=Load()),
            attr='new',
            ctx=Load()),
          args=Name(id='swingPoint', ctx=Load())),
        args=[]),
      type=Specialize(
        value=Name(id='array', ctx=Load()),
        args=Name(id='swingPoint', ctx=Load())),
      mode=Var(),
      annotations=[]),
    Assign(
      target=Name(id='timeCycles', ctx=Store()),
      value=Call(
        func=Specialize(
          value=Attribute(
            value=Name(id='array', ctx=Load()),
            attr='new',
            ctx=Load()),
          args=Name(id='timeCycle', ctx=Load())),
        args=[]),
      type=Specialize(
        value=Name(id='array', ctx=Load()),
        args=Name(id='timeCycle', ctx=Load())),
      mode=Var(),
      annotations=[]),
    Assign(
      target=Name(id='timeCyclesForecast', ctx=Store()),
      value=Call(
        func=Specialize(
          value=Attribute(
            value=Name(id='array', ctx=Load()),
            attr='new',
            ctx=Load()),
          args=Name(id='line', ctx=Load())),
        args=[]),
      type=Specialize(
        value=Name(id='array', ctx=Load()),
        args=Name(id='line', ctx=Load())),
      mode=Var(),
      annotations=[]),
    Assign(
      target=Name(id='waves', ctx=Store()),
      value=Call(
        func=Specialize(
          value=Attribute(
            value=Name(id='array', ctx=Load()),
            attr='new',
            ctx=Load()),
          args=Name(id='wave', ctx=Load())),
        args=[]),
      type=Specialize(
        value=Name(id='array', ctx=Load()),
        args=Name(id='wave', ctx=Load())),
      mode=Var(),
      annotations=[]),
    Assign(
      target=Name(id='priceTargets', ctx=Store()),
      value=Call(
        func=Specialize(
          value=Attribute(
            value=Name(id='array', ctx=Load()),
            attr='new',
            ctx=Load()),
          args=Name(id='priceTarget', ctx=Load())),
        args=[]),
      type=Specialize(
        value=Name(id='array', ctx=Load()),
        args=Name(id='priceTarget', ctx=Load())),
      mode=Var(),
      annotations=[]),
    Assign(
      target=Name(id='currentLeg', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='int', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='newPivot', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='bool', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='pivotLow', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='bool', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='pivotHigh', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='bool', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='tenkanSen', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='float', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='kinjuSen', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='float', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='chikouSpan', ctx=Store()),
      value=Name(id='close', ctx=Load()),
      type=Name(id='float', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='senkouSpanA', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='float', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='senkouSpanB', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='float', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='kumoChange', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='bool', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='kumoColor', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='color', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='tenkanSenCross', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='bool', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='kinjuSenCross', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='bool', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='extremeHigh', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='float', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='extremeLow', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='float', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='newExtremeHigh', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='bool', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='newExtremeLow', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='bool', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='lowest', ctx=Store()),
      value=Name(id='na', ctx=Load()),
      type=Name(id='float', ctx=Load()),
      mode=Var(),
      annotations=[]),
    Assign(
      target=Name(id='legIndex', ctx=Store()),
      value=Subscript(
        value=Name(id='bar_index', ctx=Load()),
        slice=Name(id='pivotLengthInput', ctx=Load()),
        ctx=Load()),
      type=Name(id='int', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='legHigh', ctx=Store()),
      value=Subscript(
        value=Name(id='high', ctx=Load()),
        slice=Name(id='pivotLengthInput', ctx=Load()),
        ctx=Load()),
      type=Name(id='float', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='legLow', ctx=Store()),
      value=Subscript(
        value=Name(id='low', ctx=Load()),
        slice=Name(id='pivotLengthInput', ctx=Load()),
        ctx=Load()),
      type=Name(id='float', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='legTime', ctx=Store()),
      value=Subscript(
        value=Name(id='time', ctx=Load()),
        slice=Name(id='pivotLengthInput', ctx=Load()),
        ctx=Load()),
      type=Name(id='int', ctx=Load()),
      annotations=[]),
    Assign(
      target=Name(id='atr200', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='ta', ctx=Load()),
          attr='atr',
          ctx=Load()),
        args=[
          Arg(
            value=Constant(value=200))]),
      type=Name(id='float', ctx=Load()),
      annotations=[]),
    FunctionDef(
      name='leg',
      args=[],
      body=[
        Assign(
          target=Name(id='leg', ctx=Store()),
          value=Constant(value=0),
          mode=Var(),
          annotations=[]),
        Assign(
          target=Name(id='newLegHigh', ctx=Store()),
          value=Compare(
            left=Name(id='legHigh', ctx=Load()),
            ops=[
              Gt()],
            comparators=[
              Call(
                func=Attribute(
                  value=Name(id='ta', ctx=Load()),
                  attr='highest',
                  ctx=Load()),
                args=[
                  Arg(
                    value=Name(id='pivotLengthInput', ctx=Load()))])]),
          annotations=[]),
        Assign(
          target=Name(id='newLegLow', ctx=Store()),
          value=Compare(
            left=Name(id='legLow', ctx=Load()),
            ops=[
              Lt()],
            comparators=[
              Call(
                func=Attribute(
                  value=Name(id='ta', ctx=Load()),
                  attr='lowest',
                  ctx=Load()),
                args=[
                  Arg(
                    value=Name(id='pivotLengthInput', ctx=Load()))])]),
          annotations=[]),
        Expr(
          value=If(
            test=Name(id='newLegHigh', ctx=Load()),
            body=[
              ReAssign(
                target=Name(id='leg', ctx=Store()),
                value=Name(id='BEARISH_LEG', ctx=Load()))],
            orelse=[
              Expr(
                value=If(
                  test=Name(id='newLegLow', ctx=Load()),
                  body=[
                    ReAssign(
                      target=Name(id='leg', ctx=Store()),
                      value=Name(id='BULLISH_LEG', ctx=Load()))],
                  orelse=[]))])),
        Expr(
          value=Name(id='leg', ctx=Load()))],
      method=0,
      export=0,
      annotations=[
        '// @returns             int']),
    FunctionDef(
      name='startOfNewLeg',
      args=[
        Param(
          name='leg',
          type=Name(id='int', ctx=Load()))],
      body=[
        Expr(
          value=Compare(
            left=Call(
              func=Attribute(
                value=Name(id='ta', ctx=Load()),
                attr='change',
                ctx=Load()),
              args=[
                Arg(
                  value=Name(id='leg', ctx=Load()))]),
            ops=[
              NotEq()],
            comparators=[
              Constant(value=0)]))],
      method=0,
      export=0,
      annotations=[
        '// @param leg           (int) Current leg value',
        '// @returns             bool']),
    FunctionDef(
      name='startOfBearishLeg',
      args=[
        Param(
          name='leg',
          type=Name(id='int', ctx=Load()))],
      body=[
        Expr(
          value=Compare(
            left=Call(
              func=Attribute(
                value=Name(id='ta', ctx=Load()),
                attr='change',
                ctx=Load()),
              args=[
                Arg(
                  value=Name(id='leg', ctx=Load()))]),
            ops=[
              Eq()],
            comparators=[
              UnaryOp(
                op=USub(),
                operand=Constant(value=1))]))],
      method=0,
      export=0,
      annotations=[
        '// @param leg           (int) Current leg value',
        '// @returns             bool']),
    FunctionDef(
      name='startOfBullishLeg',
      args=[
        Param(
          name='leg',
          type=Name(id='int', ctx=Load()))],
      body=[
        Expr(
          value=Compare(
            left=Call(
              func=Attribute(
                value=Name(id='ta', ctx=Load()),
                attr='change',
                ctx=Load()),
              args=[
                Arg(
                  value=Name(id='leg', ctx=Load()))]),
            ops=[
              Eq()],
            comparators=[
              UnaryOp(
                op=UAdd(),
                operand=Constant(value=1))]))],
      method=0,
      export=0,
      annotations=[
        '// @param leg           (int) Current leg value',
        '// @returns             bool']),
    FunctionDef(
      name='average',
      args=[
        Param(
          name='length',
          type=Name(id='int', ctx=Load()))],
      body=[
        Expr(
          value=Call(
            func=Attribute(
              value=Name(id='math', ctx=Load()),
              attr='round_to_mintick',
              ctx=Load()),
            args=[
              Arg(
                value=BinOp(
                  left=Constant(value=0.5),
                  op=Mult(),
                  right=BinOp(
                    left=Call(
                      func=Attribute(
                        value=Name(id='ta', ctx=Load()),
                        attr='highest',
                        ctx=Load()),
                      args=[
                        Arg(
                          value=Name(id='length', ctx=Load()))]),
                    op=Add(),
                    right=Call(
                      func=Attribute(
                        value=Name(id='ta', ctx=Load()),
                        attr='lowest',
                        ctx=Load()),
                      args=[
                        Arg(
                          value=Name(id='length', ctx=Load()))]))))]))],
      method=0,
      export=0,
      annotations=[
        '// @param length        (int) Number of bar to calculate the price range',
        '// @returns             float']),
    FunctionDef(
      name='extremesOnLastXBars',
      args=[
        Param(
          name='lastXBars',
          type=Name(id='int', ctx=Load()))],
      body=[
        Expr(
          value=Tuple(
            elts=[
              BinOp(
                left=Call(
                  func=Attribute(
                    value=Name(id='ta', ctx=Load()),
                    attr='highest',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='lastXBars', ctx=Load()))]),
                op=Add(),
                right=Name(id='atr200', ctx=Load())),
              BinOp(
                left=Call(
                  func=Attribute(
                    value=Name(id='ta', ctx=Load()),
                    attr='lowest',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='lastXBars', ctx=Load()))]),
                op=Sub(),
                right=Name(id='atr200', ctx=Load()))],
            ctx=Load()))],
      method=0,
      export=0,
      annotations=[
        '// @param lastXBars     (int) period for the calculations',
        '// @returns             float tuple']),
    FunctionDef(
      name='chartPoint',
      args=[
        Param(
          name='point',
          type=Name(id='swingPoint', ctx=Load()))],
      body=[
        Expr(
          value=Call(
            func=Attribute(
              value=Attribute(
                value=Name(id='chart', ctx=Load()),
                attr='point',
                ctx=Load()),
              attr='new',
              ctx=Load()),
            args=[
              Arg(
                value=Attribute(
                  value=Name(id='point', ctx=Load()),
                  attr='barTime',
                  ctx=Load())),
              Arg(
                value=Attribute(
                  value=Name(id='point', ctx=Load()),
                  attr='barIndex',
                  ctx=Load())),
              Arg(
                value=Attribute(
                  value=Name(id='point', ctx=Load()),
                  attr='priceLevel',
                  ctx=Load()))]))],
      method=0,
      export=0,
      annotations=[
        '// @param point         swingPoint to parse',
        '// @returns             chart.point ID']),
    FunctionDef(
      name='gatherWaveI',
      args=[],
      body=[
        Assign(
          target=Name(id='size', ctx=Store()),
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='size',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='swingPoints', ctx=Load()))]),
          annotations=[]),
        Expr(
          value=If(
            test=Compare(
              left=Name(id='size', ctx=Load()),
              ops=[
                GtE()],
              comparators=[
                Constant(value=2)]),
            body=[
              Assign(
                target=Name(id='A', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=2)))]),
                annotations=[]),
              Assign(
                target=Name(id='B', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=1)))]),
                annotations=[]),
              Assign(
                target=Name(id='waveSize', ctx=Store()),
                value=BinOp(
                  left=Attribute(
                    value=Name(id='B', ctx=Load()),
                    attr='barIndex',
                    ctx=Load()),
                  op=Sub(),
                  right=Attribute(
                    value=Name(id='A', ctx=Load()),
                    attr='barIndex',
                    ctx=Load())),
                annotations=[]),
              Assign(
                target=Name(id='minimumWaveSize', ctx=Store()),
                value=Compare(
                  left=Name(id='waveSize', ctx=Load()),
                  ops=[
                    GtE()],
                  comparators=[
                    Constant(value=9)]),
                annotations=[]),
              Expr(
                value=If(
                  test=Name(id='minimumWaveSize', ctx=Load()),
                  body=[
                    Assign(
                      target=Name(id='bias', ctx=Store()),
                      value=Conditional(
                        test=Compare(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='leg',
                            ctx=Load()),
                          ops=[
                            Eq()],
                          comparators=[
                            Name(id='BULLISH_LEG', ctx=Load())]),
                        body=Name(id='BEARISH', ctx=Load()),
                        orelse=Name(id='BULLISH', ctx=Load())),
                      annotations=[]),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='wave', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Name(id='array', ctx=Load()),
                                attr='from',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='A', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='B', ctx=Load()))]))])),
                          Arg(
                            value=Name(id='WAVE_I', ctx=Load())),
                          Arg(
                            value=Name(id='bias', ctx=Load()))]))],
                  orelse=[]))],
            orelse=[]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             wave ID']),
    FunctionDef(
      name='gatherWaveV',
      args=[],
      body=[
        Assign(
          target=Name(id='size', ctx=Store()),
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='size',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='swingPoints', ctx=Load()))]),
          annotations=[]),
        Expr(
          value=If(
            test=Compare(
              left=Name(id='size', ctx=Load()),
              ops=[
                GtE()],
              comparators=[
                Constant(value=3)]),
            body=[
              Assign(
                target=Name(id='A', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=3)))]),
                annotations=[]),
              Assign(
                target=Name(id='B', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=2)))]),
                annotations=[]),
              Assign(
                target=Name(id='C', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=1)))]),
                annotations=[]),
              Assign(
                target=Name(id='waveSize', ctx=Store()),
                value=BinOp(
                  left=Attribute(
                    value=Name(id='C', ctx=Load()),
                    attr='barIndex',
                    ctx=Load()),
                  op=Sub(),
                  right=Attribute(
                    value=Name(id='A', ctx=Load()),
                    attr='barIndex',
                    ctx=Load())),
                annotations=[]),
              Assign(
                target=Name(id='minimumWaveSize', ctx=Store()),
                value=Compare(
                  left=Name(id='waveSize', ctx=Load()),
                  ops=[
                    GtE()],
                  comparators=[
                    Constant(value=9)]),
                annotations=[]),
              Assign(
                target=Name(id='threshold', ctx=Store()),
                value=BinOp(
                  left=Call(
                    func=Attribute(
                      value=Name(id='math', ctx=Load()),
                      attr='abs',
                      ctx=Load()),
                    args=[
                      Arg(
                        value=BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load())))]),
                  op=Mult(),
                  right=Constant(value=0.2)),
                annotations=[]),
              Assign(
                target=Name(id='isVWave', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        GtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        LtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Add(),
                          right=Name(id='threshold', ctx=Load()))])]),
                annotations=[]),
              Expr(
                value=If(
                  test=BoolOp(
                    op=And(),
                    values=[
                      Name(id='isVWave', ctx=Load()),
                      Name(id='minimumWaveSize', ctx=Load())]),
                  body=[
                    Assign(
                      target=Name(id='bias', ctx=Store()),
                      value=Conditional(
                        test=Compare(
                          left=Attribute(
                            value=Name(id='C', ctx=Load()),
                            attr='leg',
                            ctx=Load()),
                          ops=[
                            Eq()],
                          comparators=[
                            Name(id='BULLISH_LEG', ctx=Load())]),
                        body=Name(id='BEARISH', ctx=Load()),
                        orelse=Name(id='BULLISH', ctx=Load())),
                      annotations=[]),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='wave', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Name(id='array', ctx=Load()),
                                attr='from',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='A', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='B', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='C', ctx=Load()))]))])),
                          Arg(
                            value=Name(id='WAVE_V', ctx=Load())),
                          Arg(
                            value=Name(id='bias', ctx=Load()))]))],
                  orelse=[]))],
            orelse=[]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             wave ID']),
    FunctionDef(
      name='gatherWaveN',
      args=[],
      body=[
        Assign(
          target=Name(id='size', ctx=Store()),
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='size',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='swingPoints', ctx=Load()))]),
          annotations=[]),
        Expr(
          value=If(
            test=Compare(
              left=Name(id='size', ctx=Load()),
              ops=[
                GtE()],
              comparators=[
                Constant(value=4)]),
            body=[
              Assign(
                target=Name(id='A', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=4)))]),
                annotations=[]),
              Assign(
                target=Name(id='B', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=3)))]),
                annotations=[]),
              Assign(
                target=Name(id='C', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=2)))]),
                annotations=[]),
              Assign(
                target=Name(id='D', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=1)))]),
                annotations=[]),
              Assign(
                target=Name(id='waveSize', ctx=Store()),
                value=BinOp(
                  left=Attribute(
                    value=Name(id='D', ctx=Load()),
                    attr='barIndex',
                    ctx=Load()),
                  op=Sub(),
                  right=Attribute(
                    value=Name(id='A', ctx=Load()),
                    attr='barIndex',
                    ctx=Load())),
                annotations=[]),
              Assign(
                target=Name(id='minimumWaveSize', ctx=Store()),
                value=Compare(
                  left=Name(id='waveSize', ctx=Load()),
                  ops=[
                    GtE()],
                  comparators=[
                    Constant(value=9)]),
                annotations=[]),
              Assign(
                target=Name(id='threshold', ctx=Store()),
                value=BinOp(
                  left=Call(
                    func=Attribute(
                      value=Name(id='math', ctx=Load()),
                      attr='abs',
                      ctx=Load()),
                    args=[
                      Arg(
                        value=BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load())))]),
                  op=Mult(),
                  right=Constant(value=0.2)),
                annotations=[]),
              Assign(
                target=Name(id='isBullishWaveN', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Attribute(
                        value=Name(id='A', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Lt()],
                      comparators=[
                        Attribute(
                          value=Name(id='B', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Gt()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Add(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Lt()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='D', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Gt()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Add(),
                          right=Name(id='threshold', ctx=Load()))])]),
                annotations=[]),
              Assign(
                target=Name(id='isBearishWaveN', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Attribute(
                        value=Name(id='A', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Gt()],
                      comparators=[
                        Attribute(
                          value=Name(id='B', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Lt()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Gt()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Add(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='D', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Lt()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Name(id='threshold', ctx=Load()))])]),
                annotations=[]),
              Assign(
                target=Name(id='isWaveN', ctx=Store()),
                value=BoolOp(
                  op=Or(),
                  values=[
                    Name(id='isBullishWaveN', ctx=Load()),
                    Name(id='isBearishWaveN', ctx=Load())]),
                annotations=[]),
              Expr(
                value=If(
                  test=BoolOp(
                    op=And(),
                    values=[
                      Name(id='isWaveN', ctx=Load()),
                      Name(id='minimumWaveSize', ctx=Load())]),
                  body=[
                    Assign(
                      target=Name(id='bias', ctx=Store()),
                      value=Conditional(
                        test=Compare(
                          left=Attribute(
                            value=Name(id='D', ctx=Load()),
                            attr='leg',
                            ctx=Load()),
                          ops=[
                            Eq()],
                          comparators=[
                            Name(id='BULLISH_LEG', ctx=Load())]),
                        body=Name(id='BEARISH', ctx=Load()),
                        orelse=Name(id='BULLISH', ctx=Load())),
                      annotations=[]),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='wave', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Name(id='array', ctx=Load()),
                                attr='from',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='A', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='B', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='C', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='D', ctx=Load()))]))])),
                          Arg(
                            value=Name(id='WAVE_N', ctx=Load())),
                          Arg(
                            value=Name(id='bias', ctx=Load()))]))],
                  orelse=[]))],
            orelse=[]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             wave ID']),
    FunctionDef(
      name='gatherWaveP',
      args=[],
      body=[
        Assign(
          target=Name(id='size', ctx=Store()),
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='size',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='swingPoints', ctx=Load()))]),
          annotations=[]),
        Expr(
          value=If(
            test=Compare(
              left=Name(id='size', ctx=Load()),
              ops=[
                GtE()],
              comparators=[
                Constant(value=4)]),
            body=[
              Assign(
                target=Name(id='A', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=4)))]),
                annotations=[]),
              Assign(
                target=Name(id='B', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=3)))]),
                annotations=[]),
              Assign(
                target=Name(id='C', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=2)))]),
                annotations=[]),
              Assign(
                target=Name(id='D', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=1)))]),
                annotations=[]),
              Assign(
                target=Name(id='minimumDistance', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='math', ctx=Load()),
                    attr='min',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='abs',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='A', ctx=Load()),
                                attr='barIndex',
                                ctx=Load()),
                              op=Sub(),
                              right=Attribute(
                                value=Name(id='C', ctx=Load()),
                                attr='barIndex',
                                ctx=Load())))])),
                    Arg(
                      value=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='abs',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='B', ctx=Load()),
                                attr='barIndex',
                                ctx=Load()),
                              op=Sub(),
                              right=Attribute(
                                value=Name(id='D', ctx=Load()),
                                attr='barIndex',
                                ctx=Load())))]))]),
                annotations=[]),
              Assign(
                target=Name(id='threshold', ctx=Store()),
                value=BinOp(
                  left=Constant(value=1.25),
                  op=Mult(),
                  right=Name(id='minimumDistance', ctx=Load())),
                annotations=[]),
              Assign(
                target=Name(id='goodShape', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='abs',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='A', ctx=Load()),
                                attr='barIndex',
                                ctx=Load()),
                              op=Sub(),
                              right=Attribute(
                                value=Name(id='B', ctx=Load()),
                                attr='barIndex',
                                ctx=Load())))]),
                      ops=[
                        LtE()],
                      comparators=[
                        Name(id='threshold', ctx=Load())]),
                    Compare(
                      left=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='abs',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='C', ctx=Load()),
                                attr='barIndex',
                                ctx=Load()),
                              op=Sub(),
                              right=Attribute(
                                value=Name(id='D', ctx=Load()),
                                attr='barIndex',
                                ctx=Load())))]),
                      ops=[
                        LtE()],
                      comparators=[
                        Name(id='threshold', ctx=Load())])]),
                annotations=[]),
              Assign(
                target=Name(id='waveSize', ctx=Store()),
                value=BinOp(
                  left=Attribute(
                    value=Name(id='D', ctx=Load()),
                    attr='barIndex',
                    ctx=Load()),
                  op=Sub(),
                  right=Attribute(
                    value=Name(id='A', ctx=Load()),
                    attr='barIndex',
                    ctx=Load())),
                annotations=[]),
              Assign(
                target=Name(id='minimumWaveSize', ctx=Store()),
                value=Compare(
                  left=Name(id='waveSize', ctx=Load()),
                  ops=[
                    GtE()],
                  comparators=[
                    Constant(value=9)]),
                annotations=[]),
              Assign(
                target=Name(id='isBullishWaveP', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='max',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Attribute(
                              value=Name(id='A', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='B', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='C', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='D', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load()))]),
                      ops=[
                        Eq()],
                      comparators=[
                        Attribute(
                          value=Name(id='A', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())]),
                    Compare(
                      left=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='min',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Attribute(
                              value=Name(id='A', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='B', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='C', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='D', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load()))]),
                      ops=[
                        Eq()],
                      comparators=[
                        Attribute(
                          value=Name(id='B', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Gt()],
                      comparators=[
                        Attribute(
                          value=Name(id='D', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())])]),
                annotations=[]),
              Assign(
                target=Name(id='isBearishWaveP', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='min',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Attribute(
                              value=Name(id='A', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='B', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='C', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='D', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load()))]),
                      ops=[
                        Eq()],
                      comparators=[
                        Attribute(
                          value=Name(id='A', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())]),
                    Compare(
                      left=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='max',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Attribute(
                              value=Name(id='A', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='B', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='C', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='D', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load()))]),
                      ops=[
                        Eq()],
                      comparators=[
                        Attribute(
                          value=Name(id='B', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Lt()],
                      comparators=[
                        Attribute(
                          value=Name(id='D', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())])]),
                annotations=[]),
              Assign(
                target=Name(id='isWaveP', ctx=Store()),
                value=BoolOp(
                  op=Or(),
                  values=[
                    Name(id='isBullishWaveP', ctx=Load()),
                    Name(id='isBearishWaveP', ctx=Load())]),
                annotations=[]),
              Expr(
                value=If(
                  test=BoolOp(
                    op=And(),
                    values=[
                      Name(id='isWaveP', ctx=Load()),
                      Name(id='minimumWaveSize', ctx=Load()),
                      Name(id='goodShape', ctx=Load())]),
                  body=[
                    Assign(
                      target=Name(id='bias', ctx=Store()),
                      value=Conditional(
                        test=Compare(
                          left=Attribute(
                            value=Name(id='D', ctx=Load()),
                            attr='leg',
                            ctx=Load()),
                          ops=[
                            Eq()],
                          comparators=[
                            Name(id='BULLISH_LEG', ctx=Load())]),
                        body=Name(id='BEARISH', ctx=Load()),
                        orelse=Name(id='BULLISH', ctx=Load())),
                      annotations=[]),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='wave', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Name(id='array', ctx=Load()),
                                attr='from',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='A', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='B', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='C', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='D', ctx=Load()))]))])),
                          Arg(
                            value=Name(id='WAVE_P', ctx=Load())),
                          Arg(
                            value=Name(id='bias', ctx=Load()))]))],
                  orelse=[]))],
            orelse=[]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             wave ID']),
    FunctionDef(
      name='gatherWaveY',
      args=[],
      body=[
        Assign(
          target=Name(id='size', ctx=Store()),
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='size',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='swingPoints', ctx=Load()))]),
          annotations=[]),
        Expr(
          value=If(
            test=Compare(
              left=Name(id='size', ctx=Load()),
              ops=[
                GtE()],
              comparators=[
                Constant(value=4)]),
            body=[
              Assign(
                target=Name(id='A', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=4)))]),
                annotations=[]),
              Assign(
                target=Name(id='B', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=3)))]),
                annotations=[]),
              Assign(
                target=Name(id='C', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=2)))]),
                annotations=[]),
              Assign(
                target=Name(id='D', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=1)))]),
                annotations=[]),
              Assign(
                target=Name(id='minimumDistance', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='math', ctx=Load()),
                    attr='min',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='abs',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='A', ctx=Load()),
                                attr='barIndex',
                                ctx=Load()),
                              op=Sub(),
                              right=Attribute(
                                value=Name(id='C', ctx=Load()),
                                attr='barIndex',
                                ctx=Load())))])),
                    Arg(
                      value=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='abs',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='B', ctx=Load()),
                                attr='barIndex',
                                ctx=Load()),
                              op=Sub(),
                              right=Attribute(
                                value=Name(id='D', ctx=Load()),
                                attr='barIndex',
                                ctx=Load())))]))]),
                annotations=[]),
              Assign(
                target=Name(id='threshold', ctx=Store()),
                value=BinOp(
                  left=Constant(value=1.25),
                  op=Mult(),
                  right=Name(id='minimumDistance', ctx=Load())),
                annotations=[]),
              Assign(
                target=Name(id='goodShape', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='abs',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='A', ctx=Load()),
                                attr='barIndex',
                                ctx=Load()),
                              op=Sub(),
                              right=Attribute(
                                value=Name(id='B', ctx=Load()),
                                attr='barIndex',
                                ctx=Load())))]),
                      ops=[
                        LtE()],
                      comparators=[
                        Name(id='threshold', ctx=Load())]),
                    Compare(
                      left=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='abs',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='C', ctx=Load()),
                                attr='barIndex',
                                ctx=Load()),
                              op=Sub(),
                              right=Attribute(
                                value=Name(id='D', ctx=Load()),
                                attr='barIndex',
                                ctx=Load())))]),
                      ops=[
                        LtE()],
                      comparators=[
                        Name(id='threshold', ctx=Load())])]),
                annotations=[]),
              Assign(
                target=Name(id='waveSize', ctx=Store()),
                value=BinOp(
                  left=Attribute(
                    value=Name(id='D', ctx=Load()),
                    attr='barIndex',
                    ctx=Load()),
                  op=Sub(),
                  right=Attribute(
                    value=Name(id='A', ctx=Load()),
                    attr='barIndex',
                    ctx=Load())),
                annotations=[]),
              Assign(
                target=Name(id='minimumWaveSize', ctx=Store()),
                value=Compare(
                  left=Name(id='waveSize', ctx=Load()),
                  ops=[
                    GtE()],
                  comparators=[
                    Constant(value=9)]),
                annotations=[]),
              Assign(
                target=Name(id='isBullishWaveY', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='max',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Attribute(
                              value=Name(id='A', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='B', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='C', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='D', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load()))]),
                      ops=[
                        Eq()],
                      comparators=[
                        Attribute(
                          value=Name(id='C', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())]),
                    Compare(
                      left=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='min',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Attribute(
                              value=Name(id='A', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='B', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='C', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='D', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load()))]),
                      ops=[
                        Eq()],
                      comparators=[
                        Attribute(
                          value=Name(id='D', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())]),
                    Compare(
                      left=Attribute(
                        value=Name(id='A', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Gt()],
                      comparators=[
                        Attribute(
                          value=Name(id='B', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())])]),
                annotations=[]),
              Assign(
                target=Name(id='isBearishWaveY', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='min',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Attribute(
                              value=Name(id='A', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='B', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='C', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='D', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load()))]),
                      ops=[
                        Eq()],
                      comparators=[
                        Attribute(
                          value=Name(id='C', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())]),
                    Compare(
                      left=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='max',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Attribute(
                              value=Name(id='A', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='B', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='C', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='D', ctx=Load()),
                              attr='priceLevel',
                              ctx=Load()))]),
                      ops=[
                        Eq()],
                      comparators=[
                        Attribute(
                          value=Name(id='D', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())]),
                    Compare(
                      left=Attribute(
                        value=Name(id='A', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Lt()],
                      comparators=[
                        Attribute(
                          value=Name(id='B', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())])]),
                annotations=[]),
              Assign(
                target=Name(id='isWaveY', ctx=Store()),
                value=BoolOp(
                  op=Or(),
                  values=[
                    Name(id='isBullishWaveY', ctx=Load()),
                    Name(id='isBearishWaveY', ctx=Load())]),
                annotations=[]),
              Expr(
                value=If(
                  test=BoolOp(
                    op=And(),
                    values=[
                      Name(id='isWaveY', ctx=Load()),
                      Name(id='minimumWaveSize', ctx=Load()),
                      Name(id='goodShape', ctx=Load())]),
                  body=[
                    Assign(
                      target=Name(id='bias', ctx=Store()),
                      value=Conditional(
                        test=Compare(
                          left=Attribute(
                            value=Name(id='D', ctx=Load()),
                            attr='leg',
                            ctx=Load()),
                          ops=[
                            Eq()],
                          comparators=[
                            Name(id='BULLISH_LEG', ctx=Load())]),
                        body=Name(id='BEARISH', ctx=Load()),
                        orelse=Name(id='BULLISH', ctx=Load())),
                      annotations=[]),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='wave', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Name(id='array', ctx=Load()),
                                attr='from',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='A', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='B', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='C', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='D', ctx=Load()))]))])),
                          Arg(
                            value=Name(id='WAVE_Y', ctx=Load())),
                          Arg(
                            value=Name(id='bias', ctx=Load()))]))],
                  orelse=[]))],
            orelse=[]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             wave ID']),
    FunctionDef(
      name='gatherWaveW',
      args=[],
      body=[
        Assign(
          target=Name(id='size', ctx=Store()),
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='size',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='swingPoints', ctx=Load()))]),
          annotations=[]),
        Expr(
          value=If(
            test=Compare(
              left=Name(id='size', ctx=Load()),
              ops=[
                GtE()],
              comparators=[
                Constant(value=5)]),
            body=[
              Assign(
                target=Name(id='A', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=5)))]),
                annotations=[]),
              Assign(
                target=Name(id='B', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=4)))]),
                annotations=[]),
              Assign(
                target=Name(id='C', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=3)))]),
                annotations=[]),
              Assign(
                target=Name(id='D', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=2)))]),
                annotations=[]),
              Assign(
                target=Name(id='E', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=1)))]),
                annotations=[]),
              Assign(
                target=Name(id='waveSize', ctx=Store()),
                value=BinOp(
                  left=Attribute(
                    value=Name(id='E', ctx=Load()),
                    attr='barIndex',
                    ctx=Load()),
                  op=Sub(),
                  right=Attribute(
                    value=Name(id='A', ctx=Load()),
                    attr='barIndex',
                    ctx=Load())),
                annotations=[]),
              Assign(
                target=Name(id='minimumWaveSize', ctx=Store()),
                value=Compare(
                  left=Name(id='waveSize', ctx=Load()),
                  ops=[
                    GtE()],
                  comparators=[
                    Constant(value=9)]),
                annotations=[]),
              Assign(
                target=Name(id='threshold', ctx=Store()),
                value=BinOp(
                  left=Call(
                    func=Attribute(
                      value=Name(id='math', ctx=Load()),
                      attr='abs',
                      ctx=Load()),
                    args=[
                      Arg(
                        value=BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load())))]),
                  op=Mult(),
                  right=Constant(value=0.2)),
                annotations=[]),
              Assign(
                target=Name(id='isBullishWaveW', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        LtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        GtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Add(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='E', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        GtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='E', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        LtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Add(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='D', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        GtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='D', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        LtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Add(),
                          right=Name(id='threshold', ctx=Load()))])]),
                annotations=[]),
              Assign(
                target=Name(id='isBearishWaveW', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        GtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Add(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        LtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='E', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        GtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='E', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        LtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Add(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='D', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        GtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='D', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        LtE()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Add(),
                          right=Name(id='threshold', ctx=Load()))])]),
                annotations=[]),
              Assign(
                target=Name(id='isWaveW', ctx=Store()),
                value=BoolOp(
                  op=Or(),
                  values=[
                    Name(id='isBullishWaveW', ctx=Load()),
                    Name(id='isBearishWaveW', ctx=Load())]),
                annotations=[]),
              Expr(
                value=If(
                  test=BoolOp(
                    op=And(),
                    values=[
                      Name(id='isWaveW', ctx=Load()),
                      Name(id='minimumWaveSize', ctx=Load())]),
                  body=[
                    Assign(
                      target=Name(id='bias', ctx=Store()),
                      value=Conditional(
                        test=Compare(
                          left=Attribute(
                            value=Name(id='E', ctx=Load()),
                            attr='leg',
                            ctx=Load()),
                          ops=[
                            Eq()],
                          comparators=[
                            Name(id='BULLISH_LEG', ctx=Load())]),
                        body=Name(id='BEARISH', ctx=Load()),
                        orelse=Name(id='BULLISH', ctx=Load())),
                      annotations=[]),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='wave', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Name(id='array', ctx=Load()),
                                attr='from',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='A', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='B', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='C', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='D', ctx=Load()))])),
                                Arg(
                                  value=Call(
                                    func=Name(id='chartPoint', ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='E', ctx=Load()))]))])),
                          Arg(
                            value=Name(id='WAVE_W', ctx=Load())),
                          Arg(
                            value=Name(id='bias', ctx=Load()))]))],
                  orelse=[]))],
            orelse=[]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             wave ID']),
    FunctionDef(
      name='addWave',
      args=[
        Param(
          name='newWave',
          type=Name(id='wave', ctx=Load()))],
      body=[
        Expr(
          value=If(
            test=Compare(
              left=Call(
                func=Attribute(
                  value=Name(id='waves', ctx=Load()),
                  attr='size',
                  ctx=Load()),
                args=[]),
              ops=[
                GtE()],
              comparators=[
                Name(id='maximumWavesInput', ctx=Load())]),
            body=[
              Assign(
                target=Name(id='w_ave', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='waves', ctx=Load()),
                    attr='shift',
                    ctx=Load()),
                  args=[]),
                annotations=[]),
              Expr(
                value=Call(
                  func=Attribute(
                    value=Name(id='label', ctx=Load()),
                    attr='delete',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Attribute(
                        value=Name(id='w_ave', ctx=Load()),
                        attr='waveLabel',
                        ctx=Load()))])),
              Expr(
                value=Call(
                  func=Attribute(
                    value=Name(id='line', ctx=Load()),
                    attr='delete',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Attribute(
                        value=Name(id='w_ave', ctx=Load()),
                        attr='line1',
                        ctx=Load()))])),
              Expr(
                value=Call(
                  func=Attribute(
                    value=Name(id='line', ctx=Load()),
                    attr='delete',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Attribute(
                        value=Name(id='w_ave', ctx=Load()),
                        attr='line2',
                        ctx=Load()))]))],
            orelse=[])),
        Expr(
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='push',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='waves', ctx=Load())),
              Arg(
                value=Name(id='newWave', ctx=Load()))]))],
      method=0,
      export=0,
      annotations=[
        '// @param newWave       wave to store',
        '// @returns             void']),
    FunctionDef(
      name='gatherWaves',
      args=[],
      body=[
        Assign(
          target=Name(id='waveI', ctx=Store()),
          value=Name(id='na', ctx=Load()),
          type=Name(id='wave', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='waveV', ctx=Store()),
          value=Name(id='na', ctx=Load()),
          type=Name(id='wave', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='waveN', ctx=Store()),
          value=Name(id='na', ctx=Load()),
          type=Name(id='wave', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='waveP', ctx=Store()),
          value=Name(id='na', ctx=Load()),
          type=Name(id='wave', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='waveY', ctx=Store()),
          value=Name(id='na', ctx=Load()),
          type=Name(id='wave', ctx=Load()),
          annotations=[]),
        Assign(
          target=Name(id='waveW', ctx=Store()),
          value=Name(id='na', ctx=Load()),
          type=Name(id='wave', ctx=Load()),
          annotations=[]),
        Expr(
          value=If(
            test=BoolOp(
              op=And(),
              values=[
                Name(id='showBasicWavesInput', ctx=Load()),
                Name(id='showWaveIInput', ctx=Load())]),
            body=[
              ReAssign(
                target=Name(id='waveI', ctx=Store()),
                value=Call(
                  func=Name(id='gatherWaveI', ctx=Load()),
                  args=[]))],
            orelse=[])),
        Expr(
          value=If(
            test=BoolOp(
              op=And(),
              values=[
                Name(id='showBasicWavesInput', ctx=Load()),
                Name(id='showWaveVInput', ctx=Load())]),
            body=[
              ReAssign(
                target=Name(id='waveV', ctx=Store()),
                value=Call(
                  func=Name(id='gatherWaveV', ctx=Load()),
                  args=[]))],
            orelse=[])),
        Expr(
          value=If(
            test=BoolOp(
              op=And(),
              values=[
                Name(id='showBasicWavesInput', ctx=Load()),
                Name(id='showWaveNInput', ctx=Load())]),
            body=[
              ReAssign(
                target=Name(id='waveN', ctx=Store()),
                value=Call(
                  func=Name(id='gatherWaveN', ctx=Load()),
                  args=[]))],
            orelse=[])),
        Expr(
          value=If(
            test=BoolOp(
              op=And(),
              values=[
                Name(id='showComplexWavesInput', ctx=Load()),
                Name(id='showWavePInput', ctx=Load())]),
            body=[
              ReAssign(
                target=Name(id='waveP', ctx=Store()),
                value=Call(
                  func=Name(id='gatherWaveP', ctx=Load()),
                  args=[]))],
            orelse=[])),
        Expr(
          value=If(
            test=BoolOp(
              op=And(),
              values=[
                Name(id='showComplexWavesInput', ctx=Load()),
                Name(id='showWaveYInput', ctx=Load())]),
            body=[
              ReAssign(
                target=Name(id='waveY', ctx=Store()),
                value=Call(
                  func=Name(id='gatherWaveY', ctx=Load()),
                  args=[]))],
            orelse=[])),
        Expr(
          value=If(
            test=BoolOp(
              op=And(),
              values=[
                Name(id='showComplexWavesInput', ctx=Load()),
                Name(id='showWaveWInput', ctx=Load())]),
            body=[
              ReAssign(
                target=Name(id='waveW', ctx=Store()),
                value=Call(
                  func=Name(id='gatherWaveW', ctx=Load()),
                  args=[]))],
            orelse=[])),
        Expr(
          value=If(
            test=Name(id='overlappingWavesInput', ctx=Load()),
            body=[
              Expr(
                value=If(
                  test=UnaryOp(
                    op=Not(),
                    operand=Call(
                      func=Name(id='na', ctx=Load()),
                      args=[
                        Arg(
                          value=Name(id='waveI', ctx=Load()))])),
                  body=[
                    Expr(
                      value=Call(
                        func=Name(id='addWave', ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='waveI', ctx=Load()))]))],
                  orelse=[])),
              Expr(
                value=If(
                  test=UnaryOp(
                    op=Not(),
                    operand=Call(
                      func=Name(id='na', ctx=Load()),
                      args=[
                        Arg(
                          value=Name(id='waveV', ctx=Load()))])),
                  body=[
                    Expr(
                      value=Call(
                        func=Name(id='addWave', ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='waveV', ctx=Load()))]))],
                  orelse=[])),
              Expr(
                value=If(
                  test=UnaryOp(
                    op=Not(),
                    operand=Call(
                      func=Name(id='na', ctx=Load()),
                      args=[
                        Arg(
                          value=Name(id='waveN', ctx=Load()))])),
                  body=[
                    Expr(
                      value=Call(
                        func=Name(id='addWave', ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='waveN', ctx=Load()))]))],
                  orelse=[])),
              Expr(
                value=If(
                  test=UnaryOp(
                    op=Not(),
                    operand=Call(
                      func=Name(id='na', ctx=Load()),
                      args=[
                        Arg(
                          value=Name(id='waveP', ctx=Load()))])),
                  body=[
                    Expr(
                      value=Call(
                        func=Name(id='addWave', ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='waveP', ctx=Load()))]))],
                  orelse=[])),
              Expr(
                value=If(
                  test=UnaryOp(
                    op=Not(),
                    operand=Call(
                      func=Name(id='na', ctx=Load()),
                      args=[
                        Arg(
                          value=Name(id='waveY', ctx=Load()))])),
                  body=[
                    Expr(
                      value=Call(
                        func=Name(id='addWave', ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='waveY', ctx=Load()))]))],
                  orelse=[])),
              Expr(
                value=If(
                  test=UnaryOp(
                    op=Not(),
                    operand=Call(
                      func=Name(id='na', ctx=Load()),
                      args=[
                        Arg(
                          value=Name(id='waveW', ctx=Load()))])),
                  body=[
                    Expr(
                      value=Call(
                        func=Name(id='addWave', ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='waveW', ctx=Load()))]))],
                  orelse=[]))],
            orelse=[
              Assign(
                target=Name(id='w_ave', ctx=Store()),
                value=Name(id='na', ctx=Load()),
                type=Name(id='wave', ctx=Load()),
                annotations=[]),
              Expr(
                value=If(
                  test=UnaryOp(
                    op=Not(),
                    operand=Call(
                      func=Name(id='na', ctx=Load()),
                      args=[
                        Arg(
                          value=Name(id='waveN', ctx=Load()))])),
                  body=[
                    ReAssign(
                      target=Name(id='w_ave', ctx=Store()),
                      value=Name(id='waveN', ctx=Load()))],
                  orelse=[
                    Expr(
                      value=If(
                        test=UnaryOp(
                          op=Not(),
                          operand=Call(
                            func=Name(id='na', ctx=Load()),
                            args=[
                              Arg(
                                value=Name(id='waveW', ctx=Load()))])),
                        body=[
                          ReAssign(
                            target=Name(id='w_ave', ctx=Store()),
                            value=Name(id='waveW', ctx=Load()))],
                        orelse=[
                          Expr(
                            value=If(
                              test=UnaryOp(
                                op=Not(),
                                operand=Call(
                                  func=Name(id='na', ctx=Load()),
                                  args=[
                                    Arg(
                                      value=Name(id='waveP', ctx=Load()))])),
                              body=[
                                ReAssign(
                                  target=Name(id='w_ave', ctx=Store()),
                                  value=Name(id='waveP', ctx=Load()))],
                              orelse=[
                                Expr(
                                  value=If(
                                    test=UnaryOp(
                                      op=Not(),
                                      operand=Call(
                                        func=Name(id='na', ctx=Load()),
                                        args=[
                                          Arg(
                                            value=Name(id='waveY', ctx=Load()))])),
                                    body=[
                                      ReAssign(
                                        target=Name(id='w_ave', ctx=Store()),
                                        value=Name(id='waveY', ctx=Load()))],
                                    orelse=[
                                      Expr(
                                        value=If(
                                          test=UnaryOp(
                                            op=Not(),
                                            operand=Call(
                                              func=Name(id='na', ctx=Load()),
                                              args=[
                                                Arg(
                                                  value=Name(id='waveV', ctx=Load()))])),
                                          body=[
                                            ReAssign(
                                              target=Name(id='w_ave', ctx=Store()),
                                              value=Name(id='waveV', ctx=Load()))],
                                          orelse=[
                                            Expr(
                                              value=If(
                                                test=UnaryOp(
                                                  op=Not(),
                                                  operand=Call(
                                                    func=Name(id='na', ctx=Load()),
                                                    args=[
                                                      Arg(
                                                        value=Name(id='waveI', ctx=Load()))])),
                                                body=[
                                                  ReAssign(
                                                    target=Name(id='w_ave', ctx=Store()),
                                                    value=Name(id='waveI', ctx=Load()))],
                                                orelse=[]))]))]))]))]))])),
              Expr(
                value=If(
                  test=UnaryOp(
                    op=Not(),
                    operand=Call(
                      func=Name(id='na', ctx=Load()),
                      args=[
                        Arg(
                          value=Name(id='w_ave', ctx=Load()))])),
                  body=[
                    Expr(
                      value=Call(
                        func=Name(id='addWave', ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='w_ave', ctx=Load()))]))],
                  orelse=[]))]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             void']),
    FunctionDef(
      name='colorSelection',
      args=[
        Param(
          name='typeOfWave',
          type=Name(id='string', ctx=Load()))],
      body=[
        Expr(
          value=Switch(
            cases=[
              Case(
                body=[
                  Expr(
                    value=Name(id='waveIColorInput', ctx=Load()))],
                pattern=Name(id='WAVE_I', ctx=Load())),
              Case(
                body=[
                  Expr(
                    value=Name(id='waveVColorInput', ctx=Load()))],
                pattern=Name(id='WAVE_V', ctx=Load())),
              Case(
                body=[
                  Expr(
                    value=Name(id='waveNColorInput', ctx=Load()))],
                pattern=Name(id='WAVE_N', ctx=Load())),
              Case(
                body=[
                  Expr(
                    value=Name(id='wavePColorInput', ctx=Load()))],
                pattern=Name(id='WAVE_P', ctx=Load())),
              Case(
                body=[
                  Expr(
                    value=Name(id='waveYColorInput', ctx=Load()))],
                pattern=Name(id='WAVE_Y', ctx=Load())),
              Case(
                body=[
                  Expr(
                    value=Name(id='waveWColorInput', ctx=Load()))],
                pattern=Name(id='WAVE_W', ctx=Load()))],
            subject=Name(id='typeOfWave', ctx=Load())))],
      method=0,
      export=0,
      annotations=[
        '// @param typeOfWave    (string) type of wave',
        '// @returns             color']),
    FunctionDef(
      name='plotWaves',
      args=[],
      body=[
        Expr(
          value=ForIn(
            target=Name(id='eachPolyline', ctx=Store()),
            iter=Attribute(
              value=Name(id='polyline', ctx=Load()),
              attr='all',
              ctx=Load()),
            body=[
              Expr(
                value=Call(
                  func=Attribute(
                    value=Name(id='polyline', ctx=Load()),
                    attr='delete',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='eachPolyline', ctx=Load()))]))])),
        Expr(
          value=ForIn(
            target=Tuple(
              elts=[
                Name(id='index', ctx=Store()),
                Name(id='eachWave', ctx=Store())],
              ctx=Store()),
            iter=Name(id='waves', ctx=Load()),
            body=[
              Expr(
                value=Call(
                  func=Attribute(
                    value=Name(id='label', ctx=Load()),
                    attr='delete',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Attribute(
                        value=Name(id='eachWave', ctx=Load()),
                        attr='waveLabel',
                        ctx=Load()))])),
              Expr(
                value=If(
                  test=BoolOp(
                    op=Or(),
                    values=[
                      Compare(
                        left=Attribute(
                          value=Name(id='eachWave', ctx=Load()),
                          attr='tag',
                          ctx=Load()),
                        ops=[
                          Eq()],
                        comparators=[
                          Name(id='WAVE_P', ctx=Load())]),
                      Compare(
                        left=Attribute(
                          value=Name(id='eachWave', ctx=Load()),
                          attr='tag',
                          ctx=Load()),
                        ops=[
                          Eq()],
                        comparators=[
                          Name(id='WAVE_Y', ctx=Load())])]),
                  body=[
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Attribute(
                            value=Name(id='eachWave', ctx=Load()),
                            attr='line1',
                            ctx=Load()),
                          attr='delete',
                          ctx=Load()),
                        args=[])),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Attribute(
                            value=Name(id='eachWave', ctx=Load()),
                            attr='line2',
                            ctx=Load()),
                          attr='delete',
                          ctx=Load()),
                        args=[])),
                    ReAssign(
                      target=Attribute(
                        value=Name(id='eachWave', ctx=Load()),
                        attr='line1',
                        ctx=Store()),
                      value=Call(
                        func=Attribute(
                          value=Name(id='line', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Attribute(
                                  value=Name(id='eachWave', ctx=Load()),
                                  attr='points',
                                  ctx=Load()),
                                attr='get',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Constant(value=0))])),
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Attribute(
                                  value=Name(id='eachWave', ctx=Load()),
                                  attr='points',
                                  ctx=Load()),
                                attr='get',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Constant(value=2))])),
                          Arg(
                            value=Attribute(
                              value=Name(id='xloc', ctx=Load()),
                              attr='bar_time',
                              ctx=Load())),
                          Arg(
                            value=Call(
                              func=Name(id='colorSelection', ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='eachWave', ctx=Load()),
                                    attr='tag',
                                    ctx=Load()))]),
                            name='color'),
                          Arg(
                            value=Attribute(
                              value=Name(id='line', ctx=Load()),
                              attr='style_solid',
                              ctx=Load()),
                            name='style'),
                          Arg(
                            value=Constant(value=2),
                            name='width')])),
                    ReAssign(
                      target=Attribute(
                        value=Name(id='eachWave', ctx=Load()),
                        attr='line2',
                        ctx=Store()),
                      value=Call(
                        func=Attribute(
                          value=Name(id='line', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Attribute(
                                  value=Name(id='eachWave', ctx=Load()),
                                  attr='points',
                                  ctx=Load()),
                                attr='get',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Constant(value=1))])),
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Attribute(
                                  value=Name(id='eachWave', ctx=Load()),
                                  attr='points',
                                  ctx=Load()),
                                attr='get',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Constant(value=3))])),
                          Arg(
                            value=Attribute(
                              value=Name(id='xloc', ctx=Load()),
                              attr='bar_time',
                              ctx=Load())),
                          Arg(
                            value=Call(
                              func=Name(id='colorSelection', ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='eachWave', ctx=Load()),
                                    attr='tag',
                                    ctx=Load()))]),
                            name='color'),
                          Arg(
                            value=Attribute(
                              value=Name(id='line', ctx=Load()),
                              attr='style_solid',
                              ctx=Load()),
                            name='style'),
                          Arg(
                            value=Constant(value=2),
                            name='width')]))],
                  orelse=[
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='polyline', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Attribute(
                              value=Name(id='eachWave', ctx=Load()),
                              attr='points',
                              ctx=Load())),
                          Arg(
                            value=Constant(value=False)),
                          Arg(
                            value=Constant(value=False)),
                          Arg(
                            value=Attribute(
                              value=Name(id='xloc', ctx=Load()),
                              attr='bar_time',
                              ctx=Load())),
                          Arg(
                            value=Call(
                              func=Name(id='colorSelection', ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='eachWave', ctx=Load()),
                                    attr='tag',
                                    ctx=Load()))])),
                          Arg(
                            value=Attribute(
                              value=Name(id='line', ctx=Load()),
                              attr='style_solid',
                              ctx=Load()),
                            name='line_style'),
                          Arg(
                            value=Constant(value=2),
                            name='line_width')]))])),
              Assign(
                target=Name(id='overlappingLabel', ctx=Store()),
                value=Conditional(
                  test=Compare(
                    left=Name(id='index', ctx=Load()),
                    ops=[
                      Gt()],
                    comparators=[
                      Constant(value=0)]),
                  body=Compare(
                    left=Attribute(
                      value=Call(
                        func=Attribute(
                          value=Attribute(
                            value=Name(id='eachWave', ctx=Load()),
                            attr='points',
                            ctx=Load()),
                          attr='last',
                          ctx=Load()),
                        args=[]),
                      attr='time',
                      ctx=Load()),
                    ops=[
                      Eq()],
                    comparators=[
                      Attribute(
                        value=Call(
                          func=Attribute(
                            value=Attribute(
                              value=Call(
                                func=Attribute(
                                  value=Name(id='waves', ctx=Load()),
                                  attr='get',
                                  ctx=Load()),
                                args=[
                                  Arg(
                                    value=BinOp(
                                      left=Name(id='index', ctx=Load()),
                                      op=Sub(),
                                      right=Constant(value=1)))]),
                              attr='points',
                              ctx=Load()),
                            attr='last',
                            ctx=Load()),
                          args=[]),
                        attr='time',
                        ctx=Load())]),
                  orelse=Constant(value=False)),
                annotations=[]),
              Assign(
                target=Name(id='style', ctx=Store()),
                value=Conditional(
                  test=Compare(
                    left=Attribute(
                      value=Name(id='eachWave', ctx=Load()),
                      attr='bias',
                      ctx=Load()),
                    ops=[
                      Eq()],
                    comparators=[
                      Name(id='BULLISH', ctx=Load())]),
                  body=Attribute(
                    value=Name(id='label', ctx=Load()),
                    attr='style_label_down',
                    ctx=Load()),
                  orelse=Attribute(
                    value=Name(id='label', ctx=Load()),
                    attr='style_label_up',
                    ctx=Load())),
                annotations=[]),
              Expr(
                value=If(
                  test=Name(id='overlappingLabel', ctx=Load()),
                  body=[
                    ReAssign(
                      target=Attribute(
                        value=Name(id='eachWave', ctx=Load()),
                        attr='waveLabel',
                        ctx=Store()),
                      value=Attribute(
                        value=Call(
                          func=Attribute(
                            value=Name(id='waves', ctx=Load()),
                            attr='get',
                            ctx=Load()),
                          args=[
                            Arg(
                              value=BinOp(
                                left=Name(id='index', ctx=Load()),
                                op=Sub(),
                                right=Constant(value=1)))]),
                        attr='waveLabel',
                        ctx=Load())),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Attribute(
                            value=Name(id='eachWave', ctx=Load()),
                            attr='waveLabel',
                            ctx=Load()),
                          attr='set_text',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=BinOp(
                              left=BinOp(
                                left=Call(
                                  func=Attribute(
                                    value=Attribute(
                                      value=Name(id='eachWave', ctx=Load()),
                                      attr='waveLabel',
                                      ctx=Load()),
                                    attr='get_text',
                                    ctx=Load()),
                                  args=[]),
                                op=Add(),
                                right=Constant(value='\n')),
                              op=Add(),
                              right=Attribute(
                                value=Name(id='eachWave', ctx=Load()),
                                attr='tag',
                                ctx=Load())))])),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Attribute(
                            value=Name(id='eachWave', ctx=Load()),
                            attr='waveLabel',
                            ctx=Load()),
                          attr='set_textcolor',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Call(
                              func=Name(id='colorSelection', ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='eachWave', ctx=Load()),
                                    attr='tag',
                                    ctx=Load()))]))]))],
                  orelse=[
                    ReAssign(
                      target=Attribute(
                        value=Name(id='eachWave', ctx=Load()),
                        attr='waveLabel',
                        ctx=Store()),
                      value=Call(
                        func=Attribute(
                          value=Name(id='label', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Attribute(
                                  value=Name(id='eachWave', ctx=Load()),
                                  attr='points',
                                  ctx=Load()),
                                attr='last',
                                ctx=Load()),
                              args=[])),
                          Arg(
                            value=Attribute(
                              value=Name(id='eachWave', ctx=Load()),
                              attr='tag',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='xloc', ctx=Load()),
                              attr='bar_time',
                              ctx=Load())),
                          Arg(
                            value=Call(
                              func=Name(id='color', ctx=Load()),
                              args=[
                                Arg(
                                  value=Name(id='na', ctx=Load()))]),
                            name='color'),
                          Arg(
                            value=Name(id='style', ctx=Load()),
                            name='style'),
                          Arg(
                            value=Call(
                              func=Name(id='colorSelection', ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='eachWave', ctx=Load()),
                                    attr='tag',
                                    ctx=Load()))]),
                            name='textcolor')])),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='label', ctx=Load()),
                          attr='delete',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='na', ctx=Load()))]))]))]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             void']),
    FunctionDef(
      name='drawPriceTarget',
      args=[
        Param(
          name='barIndex',
          type=Name(id='int', ctx=Load())),
        Param(
          name='priceLevel',
          type=Name(id='float', ctx=Load())),
        Param(
          name='tag',
          type=Name(id='string', ctx=Load()))],
      body=[
        Expr(
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='push',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='priceTargets', ctx=Load())),
              Arg(
                value=Call(
                  func=Attribute(
                    value=Name(id='priceTarget', ctx=Load()),
                    attr='new',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Call(
                        func=Attribute(
                          value=Name(id='line', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='barIndex', ctx=Load())),
                          Arg(
                            value=Name(id='priceLevel', ctx=Load())),
                          Arg(
                            value=BinOp(
                              left=Name(id='last_bar_index', ctx=Load()),
                              op=Add(),
                              right=Name(id='ichimokuOffsetInput', ctx=Load()))),
                          Arg(
                            value=Name(id='priceLevel', ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='chart', ctx=Load()),
                              attr='fg_color',
                              ctx=Load()),
                            name='color'),
                          Arg(
                            value=Attribute(
                              value=Name(id='line', ctx=Load()),
                              attr='style_dotted',
                              ctx=Load()),
                            name='style')])),
                    Arg(
                      value=Call(
                        func=Attribute(
                          value=Name(id='label', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=BinOp(
                              left=Name(id='last_bar_index', ctx=Load()),
                              op=Add(),
                              right=Name(id='ichimokuOffsetInput', ctx=Load()))),
                          Arg(
                            value=Name(id='priceLevel', ctx=Load())),
                          Arg(
                            value=BinOp(
                              left=BinOp(
                                left=BinOp(
                                  left=Name(id='tag', ctx=Load()),
                                  op=Add(),
                                  right=Constant(value=' (')),
                                op=Add(),
                                right=Call(
                                  func=Attribute(
                                    value=Name(id='str', ctx=Load()),
                                    attr='tostring',
                                    ctx=Load()),
                                  args=[
                                    Arg(
                                      value=Name(id='priceLevel', ctx=Load()))])),
                              op=Add(),
                              right=Constant(value=')'))),
                          Arg(
                            value=Call(
                              func=Name(id='color', ctx=Load()),
                              args=[
                                Arg(
                                  value=Name(id='na', ctx=Load()))]),
                            name='color'),
                          Arg(
                            value=Attribute(
                              value=Name(id='chart', ctx=Load()),
                              attr='fg_color',
                              ctx=Load()),
                            name='textcolor'),
                          Arg(
                            value=Attribute(
                              value=Name(id='label', ctx=Load()),
                              attr='style_label_left',
                              ctx=Load()),
                            name='style')]))]))]))],
      method=0,
      export=0,
      annotations=[
        '// @param barIndex      (int) starting bar index for line',
        '// @param priceLevel    (float) price level for line and label',
        '// @param tag           (string) text to display in label',
        '// @returns             void']),
    FunctionDef(
      name='priceTheoryTargets',
      args=[],
      body=[
        Assign(
          target=Name(id='size', ctx=Store()),
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='size',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='swingPoints', ctx=Load()))]),
          annotations=[]),
        Expr(
          value=If(
            test=Compare(
              left=Name(id='size', ctx=Load()),
              ops=[
                GtE()],
              comparators=[
                Constant(value=3)]),
            body=[
              Assign(
                target=Name(id='A', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=3)))]),
                annotations=[]),
              Assign(
                target=Name(id='B', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=2)))]),
                annotations=[]),
              Assign(
                target=Name(id='C', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='swingPoints', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='size', ctx=Load()),
                        op=Sub(),
                        right=Constant(value=1)))]),
                annotations=[]),
              Assign(
                target=Name(id='waveSize', ctx=Store()),
                value=BinOp(
                  left=Attribute(
                    value=Name(id='C', ctx=Load()),
                    attr='barIndex',
                    ctx=Load()),
                  op=Sub(),
                  right=Attribute(
                    value=Name(id='A', ctx=Load()),
                    attr='barIndex',
                    ctx=Load())),
                annotations=[]),
              Assign(
                target=Name(id='minimumWaveSize', ctx=Store()),
                value=Compare(
                  left=Name(id='waveSize', ctx=Load()),
                  ops=[
                    GtE()],
                  comparators=[
                    Constant(value=9)]),
                annotations=[]),
              Assign(
                target=Name(id='threshold', ctx=Store()),
                value=BinOp(
                  left=Call(
                    func=Attribute(
                      value=Name(id='math', ctx=Load()),
                      attr='abs',
                      ctx=Load()),
                    args=[
                      Arg(
                        value=BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load())))]),
                  op=Mult(),
                  right=Constant(value=0.2)),
                annotations=[]),
              Assign(
                target=Name(id='isDevelopingBullishWaveN', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Attribute(
                        value=Name(id='A', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Lt()],
                      comparators=[
                        Attribute(
                          value=Name(id='B', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Gt()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Add(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Lt()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Name(id='threshold', ctx=Load()))])]),
                annotations=[]),
              Assign(
                target=Name(id='isDevelopingBearishWaveN', ctx=Store()),
                value=BoolOp(
                  op=And(),
                  values=[
                    Compare(
                      left=Attribute(
                        value=Name(id='A', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Gt()],
                      comparators=[
                        Attribute(
                          value=Name(id='B', ctx=Load()),
                          attr='priceLevel',
                          ctx=Load())]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Lt()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='A', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Sub(),
                          right=Name(id='threshold', ctx=Load()))]),
                    Compare(
                      left=Attribute(
                        value=Name(id='C', ctx=Load()),
                        attr='priceLevel',
                        ctx=Load()),
                      ops=[
                        Gt()],
                      comparators=[
                        BinOp(
                          left=Attribute(
                            value=Name(id='B', ctx=Load()),
                            attr='priceLevel',
                            ctx=Load()),
                          op=Add(),
                          right=Name(id='threshold', ctx=Load()))])]),
                annotations=[]),
              Assign(
                target=Name(id='isDevelopingWaveN', ctx=Store()),
                value=BoolOp(
                  op=Or(),
                  values=[
                    Name(id='isDevelopingBullishWaveN', ctx=Load()),
                    Name(id='isDevelopingBearishWaveN', ctx=Load())]),
                annotations=[]),
              Assign(
                target=Name(id='calculationV', ctx=Store()),
                value=Constant(value=0.0),
                annotations=[]),
              Assign(
                target=Name(id='calculationE', ctx=Store()),
                value=Constant(value=0.0),
                annotations=[]),
              Assign(
                target=Name(id='calculationN', ctx=Store()),
                value=Constant(value=0.0),
                annotations=[]),
              Assign(
                target=Name(id='calculationNT', ctx=Store()),
                value=Constant(value=0.0),
                annotations=[]),
              Assign(
                target=Name(id='calculation2E', ctx=Store()),
                value=Constant(value=0.0),
                annotations=[]),
              Assign(
                target=Name(id='calculation3E', ctx=Store()),
                value=Constant(value=0.0),
                annotations=[]),
              Expr(
                value=If(
                  test=BoolOp(
                    op=And(),
                    values=[
                      Name(id='isDevelopingWaveN', ctx=Load()),
                      Name(id='minimumWaveSize', ctx=Load())]),
                  body=[
                    Expr(
                      value=ForIn(
                        target=Name(id='eachPriceTarget', ctx=Store()),
                        iter=Name(id='priceTargets', ctx=Load()),
                        body=[
                          Expr(
                            value=Call(
                              func=Attribute(
                                value=Name(id='line', ctx=Load()),
                                attr='delete',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='eachPriceTarget', ctx=Load()),
                                    attr='targetLine',
                                    ctx=Load()))])),
                          Expr(
                            value=Call(
                              func=Attribute(
                                value=Name(id='label', ctx=Load()),
                                attr='delete',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='eachPriceTarget', ctx=Load()),
                                    attr='targetLabel',
                                    ctx=Load()))]))])),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='array', ctx=Load()),
                          attr='clear',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='priceTargets', ctx=Load()))])),
                    Expr(
                      value=If(
                        test=Name(id='isDevelopingBullishWaveN', ctx=Load()),
                        body=[
                          ReAssign(
                            target=Name(id='calculationV', ctx=Store()),
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='B', ctx=Load()),
                                attr='priceLevel',
                                ctx=Load()),
                              op=Add(),
                              right=BinOp(
                                left=Attribute(
                                  value=Name(id='B', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load()),
                                op=Sub(),
                                right=Attribute(
                                  value=Name(id='C', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load())))),
                          ReAssign(
                            target=Name(id='calculationE', ctx=Store()),
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='B', ctx=Load()),
                                attr='priceLevel',
                                ctx=Load()),
                              op=Add(),
                              right=BinOp(
                                left=Attribute(
                                  value=Name(id='B', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load()),
                                op=Sub(),
                                right=Attribute(
                                  value=Name(id='A', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load())))),
                          ReAssign(
                            target=Name(id='calculationN', ctx=Store()),
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='C', ctx=Load()),
                                attr='priceLevel',
                                ctx=Load()),
                              op=Add(),
                              right=BinOp(
                                left=Attribute(
                                  value=Name(id='B', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load()),
                                op=Sub(),
                                right=Attribute(
                                  value=Name(id='A', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load())))),
                          ReAssign(
                            target=Name(id='calculationNT', ctx=Store()),
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='C', ctx=Load()),
                                attr='priceLevel',
                                ctx=Load()),
                              op=Add(),
                              right=BinOp(
                                left=Attribute(
                                  value=Name(id='C', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load()),
                                op=Sub(),
                                right=Attribute(
                                  value=Name(id='A', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load())))),
                          ReAssign(
                            target=Name(id='calculation2E', ctx=Store()),
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='B', ctx=Load()),
                                attr='priceLevel',
                                ctx=Load()),
                              op=Add(),
                              right=BinOp(
                                left=Constant(value=2),
                                op=Mult(),
                                right=BinOp(
                                  left=Attribute(
                                    value=Name(id='B', ctx=Load()),
                                    attr='priceLevel',
                                    ctx=Load()),
                                  op=Sub(),
                                  right=Attribute(
                                    value=Name(id='A', ctx=Load()),
                                    attr='priceLevel',
                                    ctx=Load()))))),
                          ReAssign(
                            target=Name(id='calculation3E', ctx=Store()),
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='B', ctx=Load()),
                                attr='priceLevel',
                                ctx=Load()),
                              op=Add(),
                              right=BinOp(
                                left=Constant(value=3),
                                op=Mult(),
                                right=BinOp(
                                  left=Attribute(
                                    value=Name(id='B', ctx=Load()),
                                    attr='priceLevel',
                                    ctx=Load()),
                                  op=Sub(),
                                  right=Attribute(
                                    value=Name(id='A', ctx=Load()),
                                    attr='priceLevel',
                                    ctx=Load())))))],
                        orelse=[])),
                    Expr(
                      value=If(
                        test=Name(id='isDevelopingBearishWaveN', ctx=Load()),
                        body=[
                          ReAssign(
                            target=Name(id='calculationV', ctx=Store()),
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='B', ctx=Load()),
                                attr='priceLevel',
                                ctx=Load()),
                              op=Sub(),
                              right=BinOp(
                                left=Attribute(
                                  value=Name(id='C', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load()),
                                op=Sub(),
                                right=Attribute(
                                  value=Name(id='B', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load())))),
                          ReAssign(
                            target=Name(id='calculationE', ctx=Store()),
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='B', ctx=Load()),
                                attr='priceLevel',
                                ctx=Load()),
                              op=Sub(),
                              right=BinOp(
                                left=Attribute(
                                  value=Name(id='A', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load()),
                                op=Sub(),
                                right=Attribute(
                                  value=Name(id='B', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load())))),
                          ReAssign(
                            target=Name(id='calculationN', ctx=Store()),
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='C', ctx=Load()),
                                attr='priceLevel',
                                ctx=Load()),
                              op=Sub(),
                              right=BinOp(
                                left=Attribute(
                                  value=Name(id='A', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load()),
                                op=Sub(),
                                right=Attribute(
                                  value=Name(id='B', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load())))),
                          ReAssign(
                            target=Name(id='calculationNT', ctx=Store()),
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='C', ctx=Load()),
                                attr='priceLevel',
                                ctx=Load()),
                              op=Sub(),
                              right=BinOp(
                                left=Attribute(
                                  value=Name(id='A', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load()),
                                op=Sub(),
                                right=Attribute(
                                  value=Name(id='C', ctx=Load()),
                                  attr='priceLevel',
                                  ctx=Load())))),
                          ReAssign(
                            target=Name(id='calculation2E', ctx=Store()),
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='B', ctx=Load()),
                                attr='priceLevel',
                                ctx=Load()),
                              op=Sub(),
                              right=BinOp(
                                left=Constant(value=2),
                                op=Mult(),
                                right=BinOp(
                                  left=Attribute(
                                    value=Name(id='A', ctx=Load()),
                                    attr='priceLevel',
                                    ctx=Load()),
                                  op=Sub(),
                                  right=Attribute(
                                    value=Name(id='B', ctx=Load()),
                                    attr='priceLevel',
                                    ctx=Load()))))),
                          ReAssign(
                            target=Name(id='calculation3E', ctx=Store()),
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='B', ctx=Load()),
                                attr='priceLevel',
                                ctx=Load()),
                              op=Sub(),
                              right=BinOp(
                                left=Constant(value=3),
                                op=Mult(),
                                right=BinOp(
                                  left=Attribute(
                                    value=Name(id='A', ctx=Load()),
                                    attr='priceLevel',
                                    ctx=Load()),
                                  op=Sub(),
                                  right=Attribute(
                                    value=Name(id='B', ctx=Load()),
                                    attr='priceLevel',
                                    ctx=Load())))))],
                        orelse=[])),
                    Expr(
                      value=If(
                        test=BoolOp(
                          op=And(),
                          values=[
                            Name(id='showBasicTargetsInput', ctx=Load()),
                            Name(id='showTargetVInput', ctx=Load())]),
                        body=[
                          Expr(
                            value=Call(
                              func=Name(id='drawPriceTarget', ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='C', ctx=Load()),
                                    attr='barIndex',
                                    ctx=Load())),
                                Arg(
                                  value=Name(id='calculationV', ctx=Load())),
                                Arg(
                                  value=Constant(value='V'))]))],
                        orelse=[])),
                    Expr(
                      value=If(
                        test=BoolOp(
                          op=And(),
                          values=[
                            Name(id='showBasicTargetsInput', ctx=Load()),
                            Name(id='showTargetEInput', ctx=Load())]),
                        body=[
                          Expr(
                            value=Call(
                              func=Name(id='drawPriceTarget', ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='C', ctx=Load()),
                                    attr='barIndex',
                                    ctx=Load())),
                                Arg(
                                  value=Name(id='calculationE', ctx=Load())),
                                Arg(
                                  value=Constant(value='E'))]))],
                        orelse=[])),
                    Expr(
                      value=If(
                        test=BoolOp(
                          op=And(),
                          values=[
                            Name(id='showBasicTargetsInput', ctx=Load()),
                            Name(id='showTargetNInput', ctx=Load())]),
                        body=[
                          Expr(
                            value=Call(
                              func=Name(id='drawPriceTarget', ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='C', ctx=Load()),
                                    attr='barIndex',
                                    ctx=Load())),
                                Arg(
                                  value=Name(id='calculationN', ctx=Load())),
                                Arg(
                                  value=Constant(value='N'))]))],
                        orelse=[])),
                    Expr(
                      value=If(
                        test=BoolOp(
                          op=And(),
                          values=[
                            Name(id='showBasicTargetsInput', ctx=Load()),
                            Name(id='showTargetNTInput', ctx=Load())]),
                        body=[
                          Expr(
                            value=Call(
                              func=Name(id='drawPriceTarget', ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='C', ctx=Load()),
                                    attr='barIndex',
                                    ctx=Load())),
                                Arg(
                                  value=Name(id='calculationNT', ctx=Load())),
                                Arg(
                                  value=Constant(value='NT'))]))],
                        orelse=[])),
                    Expr(
                      value=If(
                        test=BoolOp(
                          op=And(),
                          values=[
                            Name(id='showExtendedTargetsInput', ctx=Load()),
                            Name(id='showTarget2EInput', ctx=Load())]),
                        body=[
                          Expr(
                            value=Call(
                              func=Name(id='drawPriceTarget', ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='C', ctx=Load()),
                                    attr='barIndex',
                                    ctx=Load())),
                                Arg(
                                  value=Name(id='calculation2E', ctx=Load())),
                                Arg(
                                  value=Constant(value='2E'))]))],
                        orelse=[])),
                    Expr(
                      value=If(
                        test=BoolOp(
                          op=And(),
                          values=[
                            Name(id='showExtendedTargetsInput', ctx=Load()),
                            Name(id='showTarget3EInput', ctx=Load())]),
                        body=[
                          Expr(
                            value=Call(
                              func=Name(id='drawPriceTarget', ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Name(id='C', ctx=Load()),
                                    attr='barIndex',
                                    ctx=Load())),
                                Arg(
                                  value=Name(id='calculation3E', ctx=Load())),
                                Arg(
                                  value=Constant(value='3E'))]))],
                        orelse=[]))],
                  orelse=[]))],
            orelse=[]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             void']),
    FunctionDef(
      name='updatePriceTargets',
      args=[],
      body=[
        Expr(
          value=ForIn(
            target=Name(id='eachPriceTarget', ctx=Store()),
            iter=Name(id='priceTargets', ctx=Load()),
            body=[
              Expr(
                value=Call(
                  func=Attribute(
                    value=Name(id='line', ctx=Load()),
                    attr='set_x2',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Attribute(
                        value=Name(id='eachPriceTarget', ctx=Load()),
                        attr='targetLine',
                        ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='last_bar_index', ctx=Load()),
                        op=Add(),
                        right=Name(id='ichimokuOffsetInput', ctx=Load())))])),
              Expr(
                value=Call(
                  func=Attribute(
                    value=Name(id='label', ctx=Load()),
                    attr='set_x',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Attribute(
                        value=Name(id='eachPriceTarget', ctx=Load()),
                        attr='targetLabel',
                        ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='last_bar_index', ctx=Load()),
                        op=Add(),
                        right=Name(id='ichimokuOffsetInput', ctx=Load())))]))]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             void']),
    FunctionDef(
      name='updateLastTimeCycle',
      args=[
        Param(
          name='cycle',
          type=Name(id='timeCycle', ctx=Load()))],
      body=[
        Assign(
          target=Name(id='size', ctx=Store()),
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='size',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='timeCycles', ctx=Load()))]),
          annotations=[]),
        Expr(
          value=If(
            test=Compare(
              left=Name(id='size', ctx=Load()),
              ops=[
                Gt()],
              comparators=[
                Constant(value=0)]),
            body=[
              Assign(
                target=Name(id='c_ycle', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='last',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='timeCycles', ctx=Load()))]),
                annotations=[]),
              ReAssign(
                target=Attribute(
                  value=Name(id='c_ycle', ctx=Load()),
                  attr='lastBarIndex',
                  ctx=Store()),
                value=Attribute(
                  value=Name(id='cycle', ctx=Load()),
                  attr='firstBarIndex',
                  ctx=Load())),
              ReAssign(
                target=Attribute(
                  value=Name(id='c_ycle', ctx=Load()),
                  attr='lastBarTime',
                  ctx=Store()),
                value=Attribute(
                  value=Name(id='cycle', ctx=Load()),
                  attr='firstBarTime',
                  ctx=Load()))],
            orelse=[]))],
      method=0,
      export=0,
      annotations=[
        '// @param cycle         (timeCycle) new detected cycle',
        '// @returns             int']),
    FunctionDef(
      name='addTimeCycle',
      args=[
        Param(
          name='cycle',
          type=Name(id='timeCycle', ctx=Load()))],
      body=[
        Expr(
          value=Call(
            func=Name(id='updateLastTimeCycle', ctx=Load()),
            args=[
              Arg(
                value=Name(id='cycle', ctx=Load()))])),
        Assign(
          target=Name(id='size', ctx=Store()),
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='size',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='timeCycles', ctx=Load()))]),
          annotations=[]),
        Expr(
          value=If(
            test=Compare(
              left=Name(id='size', ctx=Load()),
              ops=[
                GtE()],
              comparators=[
                BinOp(
                  left=Name(id='maximumTimeCyclesInput', ctx=Load()),
                  op=Add(),
                  right=Constant(value=1))]),
            body=[
              Assign(
                target=Name(id='c_ycle', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='shift',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='timeCycles', ctx=Load()))]),
                annotations=[]),
              Expr(
                value=Call(
                  func=Attribute(
                    value=Name(id='line', ctx=Load()),
                    attr='delete',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Attribute(
                        value=Name(id='c_ycle', ctx=Load()),
                        attr='cycleLine',
                        ctx=Load()))])),
              Expr(
                value=Call(
                  func=Attribute(
                    value=Name(id='label', ctx=Load()),
                    attr='delete',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Attribute(
                        value=Name(id='c_ycle', ctx=Load()),
                        attr='cycleLabel',
                        ctx=Load()))]))],
            orelse=[])),
        Expr(
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='push',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='timeCycles', ctx=Load())),
              Arg(
                value=Name(id='cycle', ctx=Load()))]))],
      method=0,
      export=0,
      annotations=[
        '// @param cycle         (timeCycle) time cycle to store',
        '// @returns             void']),
    FunctionDef(
      name='parseWavesToTimeCycles',
      args=[],
      body=[
        Expr(
          value=ForIn(
            target=Name(id='eachCycle', ctx=Store()),
            iter=Name(id='timeCycles', ctx=Load()),
            body=[
              Expr(
                value=Call(
                  func=Attribute(
                    value=Attribute(
                      value=Name(id='eachCycle', ctx=Load()),
                      attr='cycleLabel',
                      ctx=Load()),
                    attr='delete',
                    ctx=Load()),
                  args=[])),
              Expr(
                value=Call(
                  func=Attribute(
                    value=Attribute(
                      value=Name(id='eachCycle', ctx=Load()),
                      attr='cycleLine',
                      ctx=Load()),
                    attr='delete',
                    ctx=Load()),
                  args=[]))])),
        Expr(
          value=Call(
            func=Attribute(
              value=Name(id='timeCycles', ctx=Load()),
              attr='clear',
              ctx=Load()),
            args=[])),
        Expr(
          value=ForTo(
            target=Name(id='index', ctx=Store()),
            start=BinOp(
              left=Call(
                func=Attribute(
                  value=Name(id='waves', ctx=Load()),
                  attr='size',
                  ctx=Load()),
                args=[]),
              op=Sub(),
              right=Constant(value=1)),
            end=Constant(value=0),
            body=[
              Expr(
                value=If(
                  test=Compare(
                    left=Call(
                      func=Attribute(
                        value=Name(id='timeCycles', ctx=Load()),
                        attr='size',
                        ctx=Load()),
                      args=[]),
                    ops=[
                      GtE()],
                    comparators=[
                      Name(id='maximumTimeCyclesInput', ctx=Load())]),
                  body=[
                    Break()],
                  orelse=[])),
              Expr(
                value=If(
                  test=Compare(
                    left=Attribute(
                      value=Call(
                        func=Attribute(
                          value=Name(id='waves', ctx=Load()),
                          attr='get',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='index', ctx=Load()))]),
                      attr='tag',
                      ctx=Load()),
                    ops=[
                      Eq()],
                    comparators=[
                      Name(id='waveCyleInput', ctx=Load())]),
                  body=[
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='timeCycles', ctx=Load()),
                          attr='unshift',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Name(id='timeCycle', ctx=Load()),
                                attr='new',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Attribute(
                                    value=Call(
                                      func=Attribute(
                                        value=Attribute(
                                          value=Call(
                                            func=Attribute(
                                              value=Name(id='waves', ctx=Load()),
                                              attr='get',
                                              ctx=Load()),
                                            args=[
                                              Arg(
                                                value=Name(id='index', ctx=Load()))]),
                                          attr='points',
                                          ctx=Load()),
                                        attr='first',
                                        ctx=Load()),
                                      args=[]),
                                    attr='time',
                                    ctx=Load())),
                                Arg(
                                  value=Attribute(
                                    value=Call(
                                      func=Attribute(
                                        value=Attribute(
                                          value=Call(
                                            func=Attribute(
                                              value=Name(id='waves', ctx=Load()),
                                              attr='get',
                                              ctx=Load()),
                                            args=[
                                              Arg(
                                                value=Name(id='index', ctx=Load()))]),
                                          attr='points',
                                          ctx=Load()),
                                        attr='first',
                                        ctx=Load()),
                                      args=[]),
                                    attr='index',
                                    ctx=Load())),
                                Arg(
                                  value=Attribute(
                                    value=Call(
                                      func=Attribute(
                                        value=Attribute(
                                          value=Call(
                                            func=Attribute(
                                              value=Name(id='waves', ctx=Load()),
                                              attr='get',
                                              ctx=Load()),
                                            args=[
                                              Arg(
                                                value=Name(id='index', ctx=Load()))]),
                                          attr='points',
                                          ctx=Load()),
                                        attr='last',
                                        ctx=Load()),
                                      args=[]),
                                    attr='time',
                                    ctx=Load())),
                                Arg(
                                  value=Attribute(
                                    value=Call(
                                      func=Attribute(
                                        value=Attribute(
                                          value=Call(
                                            func=Attribute(
                                              value=Name(id='waves', ctx=Load()),
                                              attr='get',
                                              ctx=Load()),
                                            args=[
                                              Arg(
                                                value=Name(id='index', ctx=Load()))]),
                                          attr='points',
                                          ctx=Load()),
                                        attr='last',
                                        ctx=Load()),
                                      args=[]),
                                    attr='index',
                                    ctx=Load()))]))]))],
                  orelse=[]))]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             void']),
    FunctionDef(
      name='gatherTimeCycles',
      args=[],
      body=[
        Assign(
          target=Name(id='newCycle', ctx=Store()),
          value=Switch(
            cases=[
              Case(
                body=[
                  Expr(
                    value=Conditional(
                      test=Name(id='pivotHigh', ctx=Load()),
                      body=Call(
                        func=Attribute(
                          value=Name(id='timeCycle', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='legTime', ctx=Load())),
                          Arg(
                            value=Name(id='legIndex', ctx=Load()))]),
                      orelse=Name(id='na', ctx=Load())))],
                pattern=Name(id='HIGHS', ctx=Load())),
              Case(
                body=[
                  Expr(
                    value=Conditional(
                      test=Name(id='pivotLow', ctx=Load()),
                      body=Call(
                        func=Attribute(
                          value=Name(id='timeCycle', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='legTime', ctx=Load())),
                          Arg(
                            value=Name(id='legIndex', ctx=Load()))]),
                      orelse=Name(id='na', ctx=Load())))],
                pattern=Name(id='LOWS', ctx=Load())),
              Case(
                body=[
                  Expr(
                    value=Conditional(
                      test=Name(id='newPivot', ctx=Load()),
                      body=Call(
                        func=Attribute(
                          value=Name(id='timeCycle', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='legTime', ctx=Load())),
                          Arg(
                            value=Name(id='legIndex', ctx=Load()))]),
                      orelse=Name(id='na', ctx=Load())))],
                pattern=Name(id='SWINGS', ctx=Load())),
              Case(
                body=[
                  Expr(
                    value=Conditional(
                      test=Name(id='tenkanSenCross', ctx=Load()),
                      body=Call(
                        func=Attribute(
                          value=Name(id='timeCycle', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='time', ctx=Load())),
                          Arg(
                            value=Name(id='bar_index', ctx=Load()))]),
                      orelse=Name(id='na', ctx=Load())))],
                pattern=Name(id='TENKAN', ctx=Load())),
              Case(
                body=[
                  Expr(
                    value=Conditional(
                      test=Name(id='kinjuSenCross', ctx=Load()),
                      body=Call(
                        func=Attribute(
                          value=Name(id='timeCycle', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='time', ctx=Load())),
                          Arg(
                            value=Name(id='bar_index', ctx=Load()))]),
                      orelse=Name(id='na', ctx=Load())))],
                pattern=Name(id='KIJUN', ctx=Load())),
              Case(
                body=[
                  Expr(
                    value=Conditional(
                      test=Name(id='kumoChange', ctx=Load()),
                      body=Call(
                        func=Attribute(
                          value=Name(id='timeCycle', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='time', ctx=Load())),
                          Arg(
                            value=Name(id='bar_index', ctx=Load()))]),
                      orelse=Name(id='na', ctx=Load())))],
                pattern=Name(id='KUMO', ctx=Load())),
              Case(
                body=[
                  Expr(
                    value=Name(id='na', ctx=Load()))],
                pattern=Name(id='WAVE', ctx=Load()))],
            subject=Name(id='timeCycleModeInput', ctx=Load())),
          type=Name(id='timeCycle', ctx=Load()),
          annotations=[]),
        Expr(
          value=If(
            test=UnaryOp(
              op=Not(),
              operand=Call(
                func=Name(id='na', ctx=Load()),
                args=[
                  Arg(
                    value=Name(id='newCycle', ctx=Load()))])),
            body=[
              Expr(
                value=Call(
                  func=Name(id='addTimeCycle', ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='newCycle', ctx=Load()))]))],
            orelse=[
              Expr(
                value=If(
                  test=BoolOp(
                    op=And(),
                    values=[
                      Compare(
                        left=Name(id='timeCycleModeInput', ctx=Load()),
                        ops=[
                          Eq()],
                        comparators=[
                          Name(id='WAVE', ctx=Load())]),
                      Compare(
                        left=Call(
                          func=Attribute(
                            value=Name(id='waves', ctx=Load()),
                            attr='size',
                            ctx=Load()),
                          args=[]),
                        ops=[
                          Gt()],
                        comparators=[
                          Constant(value=0)])]),
                  body=[
                    Expr(
                      value=Call(
                        func=Name(id='parseWavesToTimeCycles', ctx=Load()),
                        args=[]))],
                  orelse=[]))]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             void']),
    FunctionDef(
      name='plotTimeCycles',
      args=[],
      body=[
        Assign(
          target=Name(id='size', ctx=Store()),
          value=Call(
            func=Attribute(
              value=Name(id='array', ctx=Load()),
              attr='size',
              ctx=Load()),
            args=[
              Arg(
                value=Name(id='timeCycles', ctx=Load()))]),
          annotations=[]),
        Expr(
          value=If(
            test=Compare(
              left=Name(id='size', ctx=Load()),
              ops=[
                Gt()],
              comparators=[
                Constant(value=1)]),
            body=[
              Assign(
                target=Name(id='priceLevel', ctx=Store()),
                value=Name(id='lowest', ctx=Load()),
                annotations=[]),
              Expr(
                value=ForIn(
                  target=Tuple(
                    elts=[
                      Name(id='index', ctx=Store()),
                      Name(id='eachCycle', ctx=Store())],
                    ctx=Store()),
                  iter=Name(id='timeCycles', ctx=Load()),
                  body=[
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='line', ctx=Load()),
                          attr='delete',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Attribute(
                              value=Name(id='eachCycle', ctx=Load()),
                              attr='cycleLine',
                              ctx=Load()))])),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='label', ctx=Load()),
                          attr='delete',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Attribute(
                              value=Name(id='eachCycle', ctx=Load()),
                              attr='cycleLabel',
                              ctx=Load()))])),
                    Assign(
                      target=Name(id='tagPosition', ctx=Store()),
                      value=Call(
                        func=Attribute(
                          value=Name(id='math', ctx=Load()),
                          attr='max',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Constant(value=1)),
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Name(id='math', ctx=Load()),
                                attr='round',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=BinOp(
                                    left=Constant(value=0.5),
                                    op=Mult(),
                                    right=BinOp(
                                      left=Attribute(
                                        value=Name(id='eachCycle', ctx=Load()),
                                        attr='lastBarTime',
                                        ctx=Load()),
                                      op=Sub(),
                                      right=Attribute(
                                        value=Name(id='eachCycle', ctx=Load()),
                                        attr='firstBarTime',
                                        ctx=Load()))))]))]),
                      annotations=[]),
                    Expr(
                      value=If(
                        test=BoolOp(
                          op=And(),
                          values=[
                            Compare(
                              left=Name(id='index', ctx=Load()),
                              ops=[
                                Eq()],
                              comparators=[
                                BinOp(
                                  left=Call(
                                    func=Attribute(
                                      value=Name(id='array', ctx=Load()),
                                      attr='size',
                                      ctx=Load()),
                                    args=[
                                      Arg(
                                        value=Name(id='timeCycles', ctx=Load()))]),
                                  op=Sub(),
                                  right=Constant(value=1))]),
                            Compare(
                              left=Name(id='timeCycleModeInput', ctx=Load()),
                              ops=[
                                NotEq()],
                              comparators=[
                                Name(id='WAVE', ctx=Load())])]),
                        body=[
                          Break()],
                        orelse=[])),
                    Expr(
                      value=If(
                        test=BoolOp(
                          op=And(),
                          values=[
                            Compare(
                              left=Name(id='timeCycleModeInput', ctx=Load()),
                              ops=[
                                Eq()],
                              comparators=[
                                Name(id='WAVE', ctx=Load())]),
                            Compare(
                              left=Name(id='index', ctx=Load()),
                              ops=[
                                Gt()],
                              comparators=[
                                Constant(value=0)])]),
                        body=[
                          Expr(
                            value=If(
                              test=Compare(
                                left=Attribute(
                                  value=Name(id='eachCycle', ctx=Load()),
                                  attr='firstBarIndex',
                                  ctx=Load()),
                                ops=[
                                  Lt()],
                                comparators=[
                                  Attribute(
                                    value=Call(
                                      func=Attribute(
                                        value=Name(id='timeCycles', ctx=Load()),
                                        attr='get',
                                        ctx=Load()),
                                      args=[
                                        Arg(
                                          value=BinOp(
                                            left=Name(id='index', ctx=Load()),
                                            op=Sub(),
                                            right=Constant(value=1)))]),
                                    attr='lastBarIndex',
                                    ctx=Load())]),
                              body=[
                                AugAssign(
                                  target=Name(id='priceLevel', ctx=Store()),
                                  op=Sub(),
                                  value=Name(id='atr200', ctx=Load()))],
                              orelse=[]))],
                        orelse=[])),
                    ReAssign(
                      target=Attribute(
                        value=Name(id='eachCycle', ctx=Load()),
                        attr='cycleLine',
                        ctx=Store()),
                      value=Call(
                        func=Attribute(
                          value=Name(id='line', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Attribute(
                              value=Name(id='eachCycle', ctx=Load()),
                              attr='firstBarTime',
                              ctx=Load())),
                          Arg(
                            value=Name(id='priceLevel', ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='eachCycle', ctx=Load()),
                              attr='lastBarTime',
                              ctx=Load())),
                          Arg(
                            value=Name(id='priceLevel', ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='xloc', ctx=Load()),
                              attr='bar_time',
                              ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='chart', ctx=Load()),
                              attr='fg_color',
                              ctx=Load()),
                            name='color'),
                          Arg(
                            value=Attribute(
                              value=Name(id='line', ctx=Load()),
                              attr='style_arrow_right',
                              ctx=Load()),
                            name='style')])),
                    ReAssign(
                      target=Attribute(
                        value=Name(id='eachCycle', ctx=Load()),
                        attr='cycleLabel',
                        ctx=Store()),
                      value=Call(
                        func=Attribute(
                          value=Name(id='label', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=BinOp(
                              left=Attribute(
                                value=Name(id='eachCycle', ctx=Load()),
                                attr='firstBarTime',
                                ctx=Load()),
                              op=Add(),
                              right=Name(id='tagPosition', ctx=Load()))),
                          Arg(
                            value=Name(id='priceLevel', ctx=Load())),
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Name(id='str', ctx=Load()),
                                attr='tostring',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=BinOp(
                                    left=Attribute(
                                      value=Name(id='eachCycle', ctx=Load()),
                                      attr='lastBarIndex',
                                      ctx=Load()),
                                    op=Sub(),
                                    right=Attribute(
                                      value=Name(id='eachCycle', ctx=Load()),
                                      attr='firstBarIndex',
                                      ctx=Load())))])),
                          Arg(
                            value=Attribute(
                              value=Name(id='xloc', ctx=Load()),
                              attr='bar_time',
                              ctx=Load())),
                          Arg(
                            value=Call(
                              func=Name(id='color', ctx=Load()),
                              args=[
                                Arg(
                                  value=Name(id='na', ctx=Load()))]),
                            name='color'),
                          Arg(
                            value=Attribute(
                              value=Name(id='label', ctx=Load()),
                              attr='style_none',
                              ctx=Load()),
                            name='style'),
                          Arg(
                            value=Attribute(
                              value=Name(id='chart', ctx=Load()),
                              attr='fg_color',
                              ctx=Load()),
                            name='textcolor')]))]))],
            orelse=[]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             last label ID']),
    FunctionDef(
      name='plotTimeCyclesForecast',
      args=[],
      body=[
        Assign(
          target=Name(id='lastArrayIndex', ctx=Store()),
          value=BinOp(
            left=Call(
              func=Attribute(
                value=Name(id='array', ctx=Load()),
                attr='size',
                ctx=Load()),
              args=[
                Arg(
                  value=Name(id='timeCycles', ctx=Load()))]),
            op=Sub(),
            right=Conditional(
              test=Compare(
                left=Name(id='timeCycleModeInput', ctx=Load()),
                ops=[
                  Eq()],
                comparators=[
                  Name(id='WAVE', ctx=Load())]),
              body=Constant(value=0),
              orelse=Constant(value=1))),
          annotations=[]),
        Expr(
          value=If(
            test=Compare(
              left=Name(id='lastArrayIndex', ctx=Load()),
              ops=[
                GtE()],
              comparators=[
                Name(id='timeForecastAnchorInput', ctx=Load())]),
            body=[
              Assign(
                target=Name(id='cycle', ctx=Store()),
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='get',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='timeCycles', ctx=Load())),
                    Arg(
                      value=BinOp(
                        left=Name(id='lastArrayIndex', ctx=Load()),
                        op=Sub(),
                        right=Name(id='timeForecastAnchorInput', ctx=Load())))]),
                annotations=[]),
              Assign(
                target=Name(id='taitoCycle', ctx=Store()),
                value=BinOp(
                  left=Attribute(
                    value=Name(id='cycle', ctx=Load()),
                    attr='lastBarIndex',
                    ctx=Load()),
                  op=Sub(),
                  right=Attribute(
                    value=Name(id='cycle', ctx=Load()),
                    attr='firstBarIndex',
                    ctx=Load())),
                annotations=[]),
              Assign(
                target=Name(id='forecastAnchor', ctx=Store()),
                value=Attribute(
                  value=Name(id='cycle', ctx=Load()),
                  attr='lastBarIndex',
                  ctx=Load()),
                annotations=[]),
              Assign(
                target=Name(id='indexes', ctx=Store()),
                value=Switch(
                  cases=[
                    Case(
                      body=[
                        Expr(
                          value=Call(
                            func=Attribute(
                              value=Name(id='array', ctx=Load()),
                              attr='from',
                              ctx=Load()),
                            args=[
                              Arg(
                                value=Constant(value=9)),
                              Arg(
                                value=Constant(value=17)),
                              Arg(
                                value=Constant(value=26)),
                              Arg(
                                value=Constant(value=33)),
                              Arg(
                                value=Constant(value=42)),
                              Arg(
                                value=Constant(value=51)),
                              Arg(
                                value=Constant(value=65)),
                              Arg(
                                value=Constant(value=76)),
                              Arg(
                                value=Constant(value=129)),
                              Arg(
                                value=Constant(value=172)),
                              Arg(
                                value=Constant(value=200)),
                              Arg(
                                value=Constant(value=257))]))],
                      pattern=Name(id='KIHON', ctx=Load())),
                    Case(
                      body=[
                        Expr(
                          value=Call(
                            func=Attribute(
                              value=Name(id='array', ctx=Load()),
                              attr='from',
                              ctx=Load()),
                            args=[
                              Arg(
                                value=Name(id='taitoCycle', ctx=Load())),
                              Arg(
                                value=BinOp(
                                  left=Constant(value=2),
                                  op=Mult(),
                                  right=Name(id='taitoCycle', ctx=Load()))),
                              Arg(
                                value=BinOp(
                                  left=Constant(value=3),
                                  op=Mult(),
                                  right=Name(id='taitoCycle', ctx=Load()))),
                              Arg(
                                value=BinOp(
                                  left=Constant(value=4),
                                  op=Mult(),
                                  right=Name(id='taitoCycle', ctx=Load()))),
                              Arg(
                                value=BinOp(
                                  left=Constant(value=5),
                                  op=Mult(),
                                  right=Name(id='taitoCycle', ctx=Load()))),
                              Arg(
                                value=BinOp(
                                  left=Constant(value=6),
                                  op=Mult(),
                                  right=Name(id='taitoCycle', ctx=Load()))),
                              Arg(
                                value=BinOp(
                                  left=Constant(value=7),
                                  op=Mult(),
                                  right=Name(id='taitoCycle', ctx=Load()))),
                              Arg(
                                value=BinOp(
                                  left=Constant(value=8),
                                  op=Mult(),
                                  right=Name(id='taitoCycle', ctx=Load()))),
                              Arg(
                                value=BinOp(
                                  left=Constant(value=9),
                                  op=Mult(),
                                  right=Name(id='taitoCycle', ctx=Load())))]))],
                      pattern=Name(id='TAITO', ctx=Load()))],
                  subject=Name(id='timePatternInput', ctx=Load())),
                type=Specialize(
                  value=Name(id='array', ctx=Load()),
                  args=Name(id='int', ctx=Load())),
                annotations=[]),
              Expr(
                value=ForIn(
                  target=Name(id='eachLine', ctx=Store()),
                  iter=Name(id='timeCyclesForecast', ctx=Load()),
                  body=[
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='line', ctx=Load()),
                          attr='delete',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='eachLine', ctx=Load()))]))])),
              Expr(
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='clear',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='timeCyclesForecast', ctx=Load()))])),
              Expr(
                value=Call(
                  func=Attribute(
                    value=Name(id='array', ctx=Load()),
                    attr='push',
                    ctx=Load()),
                  args=[
                    Arg(
                      value=Name(id='timeCyclesForecast', ctx=Load())),
                    Arg(
                      value=Call(
                        func=Attribute(
                          value=Name(id='line', ctx=Load()),
                          attr='new',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='forecastAnchor', ctx=Load())),
                          Arg(
                            value=Name(id='extremeHigh', ctx=Load())),
                          Arg(
                            value=Name(id='forecastAnchor', ctx=Load())),
                          Arg(
                            value=Name(id='extremeLow', ctx=Load())),
                          Arg(
                            value=Attribute(
                              value=Name(id='chart', ctx=Load()),
                              attr='fg_color',
                              ctx=Load()),
                            name='color'),
                          Arg(
                            value=Attribute(
                              value=Name(id='line', ctx=Load()),
                              attr='style_solid',
                              ctx=Load()),
                            name='style')]))])),
              Expr(
                value=ForIn(
                  target=Name(id='index', ctx=Store()),
                  iter=Name(id='indexes', ctx=Load()),
                  body=[
                    Expr(
                      value=If(
                        test=Compare(
                          left=BinOp(
                            left=Name(id='forecastAnchor', ctx=Load()),
                            op=Add(),
                            right=Name(id='index', ctx=Load())),
                          ops=[
                            Gt()],
                          comparators=[
                            BinOp(
                              left=Name(id='last_bar_index', ctx=Load()),
                              op=Add(),
                              right=Constant(value=500))]),
                        body=[
                          Break()],
                        orelse=[])),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='array', ctx=Load()),
                          attr='push',
                          ctx=Load()),
                        args=[
                          Arg(
                            value=Name(id='timeCyclesForecast', ctx=Load())),
                          Arg(
                            value=Call(
                              func=Attribute(
                                value=Name(id='line', ctx=Load()),
                                attr='new',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=BinOp(
                                    left=Name(id='forecastAnchor', ctx=Load()),
                                    op=Add(),
                                    right=Name(id='index', ctx=Load()))),
                                Arg(
                                  value=Name(id='extremeHigh', ctx=Load())),
                                Arg(
                                  value=BinOp(
                                    left=Name(id='forecastAnchor', ctx=Load()),
                                    op=Add(),
                                    right=Name(id='index', ctx=Load()))),
                                Arg(
                                  value=Name(id='extremeLow', ctx=Load())),
                                Arg(
                                  value=Attribute(
                                    value=Name(id='chart', ctx=Load()),
                                    attr='fg_color',
                                    ctx=Load()),
                                  name='color'),
                                Arg(
                                  value=Attribute(
                                    value=Name(id='line', ctx=Load()),
                                    attr='style_dotted',
                                    ctx=Load()),
                                  name='style')]))]))]))],
            orelse=[]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             void']),
    FunctionDef(
      name='updateTimeCyclesForecast',
      args=[],
      body=[
        Expr(
          value=If(
            test=BoolOp(
              op=Or(),
              values=[
                Name(id='newExtremeHigh', ctx=Load()),
                Name(id='newExtremeLow', ctx=Load())]),
            body=[
              Expr(
                value=ForIn(
                  target=Name(id='eachTimeCycle', ctx=Store()),
                  iter=Name(id='timeCyclesForecast', ctx=Load()),
                  body=[
                    Expr(
                      value=If(
                        test=Name(id='newExtremeHigh', ctx=Load()),
                        body=[
                          Expr(
                            value=Call(
                              func=Attribute(
                                value=Name(id='eachTimeCycle', ctx=Load()),
                                attr='set_y1',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Name(id='extremeHigh', ctx=Load()))]))],
                        orelse=[])),
                    Expr(
                      value=If(
                        test=Name(id='newExtremeLow', ctx=Load()),
                        body=[
                          Expr(
                            value=Call(
                              func=Attribute(
                                value=Name(id='eachTimeCycle', ctx=Load()),
                                attr='set_y2',
                                ctx=Load()),
                              args=[
                                Arg(
                                  value=Name(id='extremeLow', ctx=Load()))]))],
                        orelse=[]))]))],
            orelse=[]))],
      method=0,
      export=0,
      annotations=[
        '// @returns             void']),
    ReAssign(
      target=Name(id='currentLeg', ctx=Store()),
      value=Call(
        func=Name(id='leg', ctx=Load()),
        args=[])),
    ReAssign(
      target=Name(id='newPivot', ctx=Store()),
      value=Call(
        func=Name(id='startOfNewLeg', ctx=Load()),
        args=[
          Arg(
            value=Name(id='currentLeg', ctx=Load()))])),
    ReAssign(
      target=Name(id='pivotLow', ctx=Store()),
      value=Call(
        func=Name(id='startOfBullishLeg', ctx=Load()),
        args=[
          Arg(
            value=Name(id='currentLeg', ctx=Load()))])),
    ReAssign(
      target=Name(id='pivotHigh', ctx=Store()),
      value=Call(
        func=Name(id='startOfBearishLeg', ctx=Load()),
        args=[
          Arg(
            value=Name(id='currentLeg', ctx=Load()))])),
    ReAssign(
      target=Name(id='tenkanSen', ctx=Store()),
      value=Call(
        func=Name(id='average', ctx=Load()),
        args=[
          Arg(
            value=Name(id='tenkanSenLengthInput', ctx=Load()))])),
    ReAssign(
      target=Name(id='kinjuSen', ctx=Store()),
      value=Call(
        func=Name(id='average', ctx=Load()),
        args=[
          Arg(
            value=Name(id='kinjuSenLengthInput', ctx=Load()))])),
    ReAssign(
      target=Name(id='senkouSpanA', ctx=Store()),
      value=BinOp(
        left=Constant(value=0.5),
        op=Mult(),
        right=BinOp(
          left=Name(id='tenkanSen', ctx=Load()),
          op=Add(),
          right=Name(id='kinjuSen', ctx=Load())))),
    ReAssign(
      target=Name(id='senkouSpanB', ctx=Store()),
      value=Call(
        func=Name(id='average', ctx=Load()),
        args=[
          Arg(
            value=Name(id='senkouSpanBLengthInput', ctx=Load()))])),
    ReAssign(
      target=Name(id='kumoChange', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='ta', ctx=Load()),
          attr='change',
          ctx=Load()),
        args=[
          Arg(
            value=Compare(
              left=Name(id='senkouSpanA', ctx=Load()),
              ops=[
                GtE()],
              comparators=[
                Name(id='senkouSpanB', ctx=Load())]))])),
    ReAssign(
      target=Name(id='kumoColor', ctx=Store()),
      value=Conditional(
        test=Compare(
          left=Name(id='senkouSpanA', ctx=Load()),
          ops=[
            GtE()],
          comparators=[
            Name(id='senkouSpanB', ctx=Load())]),
        body=Call(
          func=Attribute(
            value=Name(id='color', ctx=Load()),
            attr='new',
            ctx=Load()),
          args=[
            Arg(
              value=Name(id='GREEN', ctx=Load())),
            Arg(
              value=Constant(value=80))]),
        orelse=Call(
          func=Attribute(
            value=Name(id='color', ctx=Load()),
            attr='new',
            ctx=Load()),
          args=[
            Arg(
              value=Name(id='RED', ctx=Load())),
            Arg(
              value=Constant(value=80))]))),
    ReAssign(
      target=Name(id='tenkanSenCross', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='ta', ctx=Load()),
          attr='cross',
          ctx=Load()),
        args=[
          Arg(
            value=Name(id='close', ctx=Load())),
          Arg(
            value=Name(id='tenkanSen', ctx=Load()))])),
    ReAssign(
      target=Name(id='kinjuSenCross', ctx=Store()),
      value=Call(
        func=Attribute(
          value=Name(id='ta', ctx=Load()),
          attr='cross',
          ctx=Load()),
        args=[
          Arg(
            value=Name(id='close', ctx=Load())),
          Arg(
            value=Name(id='kinjuSen', ctx=Load()))])),
    Assign(
      target=Tuple(
        elts=[
          Name(id='e_xtremeHigh', ctx=Store()),
          Name(id='e_xtremeLow', ctx=Store())],
        ctx=Store()),
      value=Call(
        func=Name(id='extremesOnLastXBars', ctx=Load()),
        args=[
          Arg(
            value=Constant(value=200))]),
      annotations=[]),
    ReAssign(
      target=Name(id='extremeHigh', ctx=Store()),
      value=Name(id='e_xtremeHigh', ctx=Load())),
    ReAssign(
      target=Name(id='extremeLow', ctx=Store()),
      value=Name(id='e_xtremeLow', ctx=Load())),
    ReAssign(
      target=Name(id='newExtremeHigh', ctx=Store()),
      value=Compare(
        left=Call(
          func=Attribute(
            value=Name(id='ta', ctx=Load()),
            attr='change',
            ctx=Load()),
          args=[
            Arg(
              value=Name(id='extremeHigh', ctx=Load()))]),
        ops=[
          NotEq()],
        comparators=[
          Constant(value=0)])),
    ReAssign(
      target=Name(id='newExtremeLow', ctx=Store()),
      value=Compare(
        left=Call(
          func=Attribute(
            value=Name(id='ta', ctx=Load()),
            attr='change',
            ctx=Load()),
          args=[
            Arg(
              value=Name(id='extremeLow', ctx=Load()))]),
        ops=[
          NotEq()],
        comparators=[
          Constant(value=0)])),
    Expr(
      value=If(
        test=BoolOp(
          op=And(),
          values=[
            Compare(
              left=Call(
                func=Attribute(
                  value=Name(id='array', ctx=Load()),
                  attr='size',
                  ctx=Load()),
                args=[
                  Arg(
                    value=Name(id='timeCycles', ctx=Load()))]),
              ops=[
                Gt()],
              comparators=[
                Constant(value=0)]),
            Compare(
              left=Name(id='bar_index', ctx=Load()),
              ops=[
                Gt()],
              comparators=[
                Constant(value=200)])]),
        body=[
          ReAssign(
            target=Name(id='lowest', ctx=Store()),
            value=BinOp(
              left=Call(
                func=Attribute(
                  value=Name(id='ta', ctx=Load()),
                  attr='lowest',
                  ctx=Load()),
                args=[
                  Arg(
                    value=BinOp(
                      left=Name(id='bar_index', ctx=Load()),
                      op=Sub(),
                      right=Attribute(
                        value=Call(
                          func=Attribute(
                            value=Name(id='array', ctx=Load()),
                            attr='first',
                            ctx=Load()),
                          args=[
                            Arg(
                              value=Name(id='timeCycles', ctx=Load()))]),
                        attr='firstBarIndex',
                        ctx=Load())))]),
              op=Sub(),
              right=Name(id='atr200', ctx=Load())))],
        orelse=[])),
    Assign(
      target=Name(id='newTimeCycle', ctx=Store()),
      value=Switch(
        cases=[
          Case(
            body=[
              Expr(
                value=Name(id='pivotHigh', ctx=Load()))],
            pattern=Name(id='HIGHS', ctx=Load())),
          Case(
            body=[
              Expr(
                value=Name(id='pivotLow', ctx=Load()))],
            pattern=Name(id='LOWS', ctx=Load())),
          Case(
            body=[
              Expr(
                value=Name(id='newPivot', ctx=Load()))],
            pattern=Name(id='SWINGS', ctx=Load())),
          Case(
            body=[
              Expr(
                value=Name(id='tenkanSenCross', ctx=Load()))],
            pattern=Name(id='TENKAN', ctx=Load())),
          Case(
            body=[
              Expr(
                value=Name(id='kinjuSenCross', ctx=Load()))],
            pattern=Name(id='KIJUN', ctx=Load())),
          Case(
            body=[
              Expr(
                value=Name(id='kumoChange', ctx=Load()))],
            pattern=Name(id='KUMO', ctx=Load())),
          Case(
            body=[
              Expr(
                value=Name(id='newPivot', ctx=Load()))],
            pattern=Name(id='WAVE', ctx=Load()))],
        subject=Name(id='timeCycleModeInput', ctx=Load())),
      type=Name(id='bool', ctx=Load()),
      annotations=[]),
    Expr(
      value=If(
        test=Attribute(
          value=Name(id='barstate', ctx=Load()),
          attr='isconfirmed',
          ctx=Load()),
        body=[
          Expr(
            value=If(
              test=Name(id='newPivot', ctx=Load()),
              body=[
                Assign(
                  target=Name(id='priceLevel', ctx=Store()),
                  value=Name(id='legHigh', ctx=Load()),
                  annotations=[]),
                Assign(
                  target=Name(id='legBias', ctx=Store()),
                  value=Name(id='BEARISH_LEG', ctx=Load()),
                  annotations=[]),
                Expr(
                  value=If(
                    test=Name(id='pivotLow', ctx=Load()),
                    body=[
                      ReAssign(
                        target=Name(id='priceLevel', ctx=Store()),
                        value=Name(id='legLow', ctx=Load())),
                      ReAssign(
                        target=Name(id='legBias', ctx=Store()),
                        value=Name(id='BULLISH_LEG', ctx=Load()))],
                    orelse=[])),
                Expr(
                  value=Call(
                    func=Attribute(
                      value=Name(id='array', ctx=Load()),
                      attr='push',
                      ctx=Load()),
                    args=[
                      Arg(
                        value=Name(id='swingPoints', ctx=Load())),
                      Arg(
                        value=Call(
                          func=Attribute(
                            value=Name(id='swingPoint', ctx=Load()),
                            attr='new',
                            ctx=Load()),
                          args=[
                            Arg(
                              value=Name(id='legTime', ctx=Load())),
                            Arg(
                              value=Name(id='legIndex', ctx=Load())),
                            Arg(
                              value=Name(id='priceLevel', ctx=Load())),
                            Arg(
                              value=Name(id='legBias', ctx=Load()))]))])),
                Expr(
                  value=Call(
                    func=Name(id='gatherWaves', ctx=Load()),
                    args=[])),
                Expr(
                  value=If(
                    test=BoolOp(
                      op=Or(),
                      values=[
                        Name(id='showBasicWavesInput', ctx=Load()),
                        Name(id='showComplexWavesInput', ctx=Load())]),
                    body=[
                      Expr(
                        value=Call(
                          func=Name(id='plotWaves', ctx=Load()),
                          args=[]))],
                    orelse=[])),
                Expr(
                  value=If(
                    test=BoolOp(
                      op=Or(),
                      values=[
                        Name(id='showBasicTargetsInput', ctx=Load()),
                        Name(id='showExtendedTargetsInput', ctx=Load())]),
                    body=[
                      Expr(
                        value=Call(
                          func=Name(id='priceTheoryTargets', ctx=Load()),
                          args=[]))],
                    orelse=[]))],
              orelse=[])),
          Expr(
            value=If(
              test=Compare(
                left=Call(
                  func=Attribute(
                    value=Name(id='priceTargets', ctx=Load()),
                    attr='size',
                    ctx=Load()),
                  args=[]),
                ops=[
                  Gt()],
                comparators=[
                  Constant(value=0)]),
              body=[
                Expr(
                  value=Call(
                    func=Name(id='updatePriceTargets', ctx=Load()),
                    args=[]))],
              orelse=[])),
          Expr(
            value=If(
              test=Name(id='newTimeCycle', ctx=Load()),
              body=[
                Expr(
                  value=Call(
                    func=Name(id='gatherTimeCycles', ctx=Load()),
                    args=[])),
                Expr(
                  value=If(
                    test=Name(id='showTimeCyclesInput', ctx=Load()),
                    body=[
                      Expr(
                        value=Call(
                          func=Name(id='plotTimeCycles', ctx=Load()),
                          args=[]))],
                    orelse=[])),
                Expr(
                  value=If(
                    test=Name(id='showTimeForecastInput', ctx=Load()),
                    body=[
                      Expr(
                        value=Call(
                          func=Name(id='plotTimeCyclesForecast', ctx=Load()),
                          args=[]))],
                    orelse=[]))],
              orelse=[
                Expr(
                  value=If(
                    test=Name(id='showTimeForecastInput', ctx=Load()),
                    body=[
                      Expr(
                        value=Call(
                          func=Name(id='updateTimeCyclesForecast', ctx=Load()),
                          args=[]))],
                    orelse=[]))]))],
        orelse=[])),
    Expr(
      value=Call(
        func=Name(id='plotshape', ctx=Load()),
        args=[
          Arg(
            value=Conditional(
              test=Name(id='showPivotMarksInput', ctx=Load()),
              body=Name(id='pivotLow', ctx=Load()),
              orelse=Name(id='na', ctx=Load()))),
          Arg(
            value=Constant(value='Swing High')),
          Arg(
            value=Attribute(
              value=Name(id='shape', ctx=Load()),
              attr='circle',
              ctx=Load())),
          Arg(
            value=Attribute(
              value=Name(id='location', ctx=Load()),
              attr='belowbar',
              ctx=Load())),
          Arg(
            value=Name(id='GREEN', ctx=Load())),
          Arg(
            value=UnaryOp(
              op=USub(),
              operand=Name(id='pivotLengthInput', ctx=Load())))])),
    Expr(
      value=If(
        test=Conditional(
          test=Name(id='showPivotMarksInput', ctx=Load()),
          body=Name(id='pivotLow', ctx=Load()),
          orelse=Name(id='na', ctx=Load())),
        body=[
          Assign(
            target=Name(id='current_long', ctx=Store()),
            value=Attribute(
              value=Name(id='location', ctx=Load()),
              attr='belowbar',
              ctx=Load()),
            annotations=[]),
          Expr(
            value=Call(
              func=Attribute(
                value=Name(id='strategy', ctx=Load()),
                attr='entry',
                ctx=Load()),
              args=[
                Arg(
                  value=Name(id='current_long', ctx=Load()),
                  name='id'),
                Arg(
                  value=Attribute(
                    value=Name(id='strategy', ctx=Load()),
                    attr='long',
                    ctx=Load()),
                  name='direction'),
                Arg(
                  value=Constant(value=15),
                  name='qty'),
                Arg(
                  value=Name(id='na', ctx=Load()),
                  name='limit'),
                Arg(
                  value=Name(id='legHigh', ctx=Load()),
                  name='stop'),
                Arg(
                  value=Constant(value=''),
                  name='oca_name'),
                Arg(
                  value=Constant(value='BUY IT'),
                  name='comment')]))],
        orelse=[])),
    Expr(
      value=If(
        test=Conditional(
          test=Name(id='showPivotMarksInput', ctx=Load()),
          body=Name(id='pivotHigh', ctx=Load()),
          orelse=Name(id='na', ctx=Load())),
        body=[
          Expr(
            value=Call(
              func=Attribute(
                value=Name(id='strategy', ctx=Load()),
                attr='entry',
                ctx=Load()),
              args=[
                Arg(
                  value=Attribute(
                    value=Name(id='location', ctx=Load()),
                    attr='abovebar',
                    ctx=Load()),
                  name='id'),
                Arg(
                  value=Attribute(
                    value=Name(id='strategy', ctx=Load()),
                    attr='short',
                    ctx=Load()),
                  name='direction'),
                Arg(
                  value=Constant(value=15),
                  name='qty'),
                Arg(
                  value=Name(id='na', ctx=Load()),
                  name='limit'),
                Arg(
                  value=Name(id='legLow', ctx=Load()),
                  name='stop'),
                Arg(
                  value=Constant(value=''),
                  name='oca_name'),
                Arg(
                  value=Constant(value='SHORT IT'),
                  name='comment')]))],
        orelse=[])),
    Expr(
      value=Call(
        func=Name(id='plotshape', ctx=Load()),
        args=[
          Arg(
            value=Conditional(
              test=Name(id='showPivotMarksInput', ctx=Load()),
              body=Name(id='pivotHigh', ctx=Load()),
              orelse=Name(id='na', ctx=Load()))),
          Arg(
            value=Constant(value='Swing Low')),
          Arg(
            value=Attribute(
              value=Name(id='shape', ctx=Load()),
              attr='circle',
              ctx=Load())),
          Arg(
            value=Attribute(
              value=Name(id='location', ctx=Load()),
              attr='abovebar',
              ctx=Load())),
          Arg(
            value=Name(id='RED', ctx=Load())),
          Arg(
            value=UnaryOp(
              op=USub(),
              operand=Name(id='pivotLengthInput', ctx=Load())))])),
    Expr(
      value=Call(
        func=Name(id='plot', ctx=Load()),
        args=[
          Arg(
            value=Conditional(
              test=Name(id='showIchimokuLinesInput', ctx=Load()),
              body=Name(id='tenkanSen', ctx=Load()),
              orelse=Name(id='na', ctx=Load()))),
          Arg(
            value=Constant(value='TenkanSen')),
          Arg(
            value=Name(id='RED', ctx=Load()),
            name='color')])),
    Expr(
      value=Call(
        func=Name(id='plot', ctx=Load()),
        args=[
          Arg(
            value=Conditional(
              test=Name(id='showIchimokuLinesInput', ctx=Load()),
              body=Name(id='kinjuSen', ctx=Load()),
              orelse=Name(id='na', ctx=Load()))),
          Arg(
            value=Constant(value='KinjuSen')),
          Arg(
            value=Attribute(
              value=Name(id='color', ctx=Load()),
              attr='blue',
              ctx=Load()),
            name='color')])),
    Expr(
      value=Call(
        func=Name(id='plot', ctx=Load()),
        args=[
          Arg(
            value=Conditional(
              test=Name(id='showIchimokuLinesInput', ctx=Load()),
              body=Name(id='chikouSpan', ctx=Load()),
              orelse=Name(id='na', ctx=Load()))),
          Arg(
            value=Constant(value='ChikouSpan')),
          Arg(
            value=UnaryOp(
              op=USub(),
              operand=Name(id='ichimokuOffsetInput', ctx=Load())),
            name='offset'),
          Arg(
            value=Call(
              func=Attribute(
                value=Name(id='color', ctx=Load()),
                attr='new',
                ctx=Load()),
              args=[
                Arg(
                  value=Constant(value='#787b86', kind='#')),
                Arg(
                  value=Constant(value=50))]),
            name='color')])),
    Assign(
      target=Name(id='kumoFast', ctx=Store()),
      value=Call(
        func=Name(id='plot', ctx=Load()),
        args=[
          Arg(
            value=Conditional(
              test=Name(id='showIchimokuKumoInput', ctx=Load()),
              body=Name(id='senkouSpanA', ctx=Load()),
              orelse=Name(id='na', ctx=Load()))),
          Arg(
            value=Constant(value='SenkouSpanA')),
          Arg(
            value=Name(id='kumoColor', ctx=Load())),
          Arg(
            value=Name(id='ichimokuOffsetInput', ctx=Load()),
            name='offset')]),
      annotations=[]),
    Assign(
      target=Name(id='kumoSlow', ctx=Store()),
      value=Call(
        func=Name(id='plot', ctx=Load()),
        args=[
          Arg(
            value=Conditional(
              test=Name(id='showIchimokuKumoInput', ctx=Load()),
              body=Name(id='senkouSpanB', ctx=Load()),
              orelse=Name(id='na', ctx=Load()))),
          Arg(
            value=Constant(value='SenkouSpanB')),
          Arg(
            value=Name(id='kumoColor', ctx=Load())),
          Arg(
            value=Name(id='ichimokuOffsetInput', ctx=Load()),
            name='offset')]),
      annotations=[]),
    Expr(
      value=Call(
        func=Name(id='fill', ctx=Load()),
        args=[
          Arg(
            value=Name(id='kumoFast', ctx=Load())),
          Arg(
            value=Name(id='kumoSlow', ctx=Load())),
          Arg(
            value=Name(id='kumoColor', ctx=Load()),
            name='color'),
          Arg(
            value=Constant(value='Kumo'),
            name='title')]))],
  annotations=[
    '//@version=5'])